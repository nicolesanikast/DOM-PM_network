{
    "collab_server" : "",
    "contents" : "load.required.packages()\n\n# Read in the input data --------------------------------------------------\n##Uncomment the lines below if the database was changed and you'd like to recompile it (the file \"newdata.csv \n#corresponds to the xlsx supporting information file of the publications), else the existing database stored \n#as an R object in the working directory will be loaded as \"g.data.nom.type\" variable\n\n  nom.data.column <- \"NOM.type.detailed\"#DON'T comment this out! this variable is needed throughout the script\n  # all.data <- read.csv(\"../newdata/newdata.csv\", header =TRUE, strip.white = TRUE)#read in the entire database\n  # #columns for the bipartite network\n  # d.data <- all.data[c(\"ENP\", \"NOM.by.location\", \"Experiment.overall\", \"NOM.type\", \"ENP.type\", \"reference\", \"year\",\n  #  \"Full.paper.title\", \"DOI\", \"NOM.type.extended\", nom.data.column)]#extract only relevant columns\n  # d.data <- d.data[d.data$ENP != \"\", ]#eliminate empty lines\n  # d.data$DOI <- tolower(d.data$DOI)#convert DOI to lower case\n  # d.data.nom.type <- d.data[d.data[, nom.data.column] != \"\", ]#double check there are no empty lines...\n  # save(d.data.nom.type, file = \"dataBase.Rdata\")#output the dataframe into an R object. This will be stored in the working directory\n\nload(\"dataBase.Rdata\")#load the R object with the database from the working directory, the data is stored in the variable \"d.data.nom.type\"\n\n# DOM and PM categorization -----------------------------------------------\n#summary of DOM types in the database:\n\ngroup1.dom <- c(\"humic substance\", \"humic acid\", \"fulvic acid\", \"total DOC\",\n                \"hydrophilic acid\", \"hydrophilic neutral acid\", \"transphilic acid\", \"leachate\", \"hydrophobic neutral\")\nwater.samples <- c(\"natural water sample\", \"industrial wastewater\", \"STP effluent\", \"STP influent\")\ngroup2.dom <- unique(as.character(d.data.nom.type$NOM.type))\ngroup2.dom <- group2.dom[!group2.dom %in% group1.dom]                                    \ngroup2.dom <- group2.dom[!group2.dom %in% water.samples]                                    \n#group1 DOM:\nn.group1DOM <- sum(d.data.nom.type$NOM.type%in%group1.dom)#the number of experiments that employ group-1 DOM\nn.group1DOM\n#write.csv(file = \"~/Downloads/group1DOM.csv\",unique(d.data.nom.type$NOM.by.location[d.data.nom.type$NOM.type%in%group1.dom]))\n#d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.by.location == \"forest floor leachate\"]\nlength(unique(as.character(d.data.nom.type$NOM.type.detailed[d.data.nom.type$NOM.type%in%group1.dom])))#number of group1-DOM types\nn.group1DOM/nrow(d.data.nom.type)#percentage of group-1 DOM\n#water samples:\nn.waterSampleDOM <- sum(d.data.nom.type$NOM.type%in%water.samples)#the number of water samples\nn.waterSampleDOM\nn.waterSampleDOM/nrow(d.data.nom.type)\nlength(unique(as.character(d.data.nom.type$NOM.type.detailed[d.data.nom.type$NOM.type%in%water.samples])))\n#group-2 DOM:\nn.group2DOM <- sum(d.data.nom.type$NOM.type%in%group2.dom)#the number of experiments that employ group-2 DOM\nn.group2DOM\nlength(unique(as.character(d.data.nom.type$NOM.type.detailed[d.data.nom.type$NOM.type%in%group2.dom])))#number of group2-DOM types\nn.group2DOM/nrow(d.data.nom.type)#percentage of group-2 DOM\n\n\n#PCA analysis of humic substances:\n  # d.data.pca  <- read.csv(\"~/Documents/Projects/version_control/DOM-PM-network/newdata/DOM_propNMR_integration.csv\")#read in the csv file\n  # d.color  <- data.frame(type = levels(d.data.pca$TYPE), col = topo.colors(length(levels(d.data.pca$TYPE)), alpha = 1))#create color scheme\n  # d.data.pca <- d.data.pca[d.data.pca$INCLUDE == \"yes\", ]#include the conssitent data\n  # d.data.pca$TYPE <- as.character(d.data.pca$TYPE)\n  # d.data.pca$col  <- sapply(1:nrow(d.data.pca), function(x) d.color$col[d.color$type == d.data.pca$TYPE[x]])\n  # d.pca.red <- d.data.pca[ ,c(\"TYPE\", \"SOURCE\", \"col\",\n  #                          \"Aliphatic.0..110ppm.\", \"Aroamtic.110..165.\", \"Carbonyl.165..220.\")]\n  # d.pca.red <- d.pca.red[complete.cases(d.pca.red), ]#keep only datapoints that have values in the above categories\n  # d.pca.red <- d.pca.red[!duplicated(d.pca.red$SOURCE),]#remove duplicates of exact same substances that were reported in different studies\n  # save(d.pca.red, file = \"domProperties.Rdata\")#save the file to the working directory\nload(\"domProperties.Rdata\")#read in DOM NMR data file for PCA analysis\nnrow(d.pca.red)#number of humic substances in this analysis\n\nd.pca.output  <- princomp(d.pca.red[ ,c(\"Aliphatic.0..110ppm.\", \"Aroamtic.110..165.\", \"Carbonyl.165..220.\"\n)], cor =T)#perform PCA on the scaled data\n\n# # #perform robust PCA, using a covariace matrix insensitive to outliers, it showed almost identical results\n# # library(MASS)\n# d.pca.output  <- princomp(d.pca.red[ ,c(\"Aliphatic.0..110ppm.\", \"Aroamtic.110..165.\", \"Carbonyl.165..220.\"\n# )], cor =T, covmat = cov.rob(d.pca.red[ ,c(\"Aliphatic.0..110ppm.\", \"Aroamtic.110..165.\", \"Carbonyl.165..220.\"\n# )]))#perform PCA on the scaled data\n\nsummary(d.pca.output, loadings = T)#PCA output including the variable loadings\nd.pca.summary <- data.frame(PC1 = jitter(d.pca.output$scores[, 1]), PC2 = d.pca.output$score[, 2], type = d.pca.red$TYPE, \n                            color = d.pca.red$col, source = d.pca.red$SOURCE)#summary data frame\n\n# Figure 1 - carbon content distribution in PC dimensions ---------------\n#Figure iterpertation of the pca results: \n#It depicts the representative percentages of the different carbon content for the materials that fall within each quarter\n#of the PC1-PC2 space. It excludes the material that lay exactly on the horizontal and vertical lines\n\n#all the materials that fall in the upper left region, exclusing those fall directly on the horizontal and vertical lines:\nupper.left <- which(d.pca.summary$PC1 <0 & d.pca.summary$PC2 >0)\nlength(upper.left)#number of matrials in this quadrant\n#what is the most prevelnt material in this quadrant?\ntop.source.upper.left <- percentage.in.quadrant(d.pca.summary, upper.left)\n#all the materials that fall in the lower left region, exclusing those fall directly on the horizontal and vertical lines:\nlower.left <- which(d.pca.summary$PC1 <0 & d.pca.summary$PC2 <0)\nlength(lower.left)#number of matrials in this quadrant\ntop.source.lower.left <- percentage.in.quadrant(d.pca.summary, lower.left)\n\n#all the materials that fall in the lower right region, exclusing those fall directly on the horizontal and vertical lines:\nlower.right <- which(d.pca.summary$PC1 >0 & d.pca.summary$PC2 <0)\nlength(lower.right)#number of matrials in this quadrant\ntop.source.lower.right <- percentage.in.quadrant(d.pca.summary, lower.right)\n\n#all the materials that fall in the upper left region, exclusing those fall directly on the horizontal and vertical lines:\nupper.right <- which(d.pca.summary$PC1 >0 & d.pca.summary$PC2 >0)\nlength(upper.right)#number of matrials in this quadrant\ntop.source.upper.right <- percentage.in.quadrant(d.pca.summary, upper.right)\n\n#list of all these regions:\nregions <- list(upper.left, lower.left, lower.right, upper.right)\n#obtain the mean and std of the carbonyl distributiono of each region\nhist.data <- data.frame()\nfor(i in 1:length(regions)){\n  t <- d.pca.red[regions[[i]], c(\"Aliphatic.0..110ppm.\", \"Aroamtic.110..165.\", \"Carbonyl.165..220.\")]\n  t <- melt(t)\n  t$panel <- i\n  hist.data <- rbind(hist.data, t)\n}\nhist.data$panel <- factor(hist.data$panel, levels = c(1,4,2,3))#reorder the panels\n\n#density plots:\nggplot(data = hist.data, aes(x = value, fill = variable)) +  \n  geom_density(alpha = 0.7) + \n  facet_wrap(~panel) +\n  #facet_wrap(~panel, scales='free_y') + #to have each panel have it's own y scale\n  theme_classic(base_size = 7) + \n  theme(axis.line.x = element_line(color=\"black\", size = 0.1),\n        #axis.line.y = element_line(color=\"black\", size = 0.1),\n        #axis.ticks = element_blank(),\n        #axis.text = element_blank(),\n        #axis.title = element_blank(),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14),\n        strip.background = element_blank(),\n        legend.text = element_text(size  = 12),\n        legend.title = element_text(size = 14),\n        legend.position = \"top\",\n        #legend.direction = \"vertical\",\n        strip.text.x = element_blank()) + \n  annotate(\"text\", label = c(\"PC1 < 0, PC2 > 0\",\"PC1 > 0, PC2 > 0\", \"PC1 < 0, PC2 < 0\", \"PC1 > 0, PC2 < 0\"), x =50, y = 0.15, size = 5, fontface =2) + \n  annotate(\"text\", label = c(top.source.upper.left, top.source.upper.right, top.source.lower.left, top.source.lower.right), x =50, y = 0.10, size = 4.5) +\n  annotate(\"text\", label = c(paste(as.character(length(upper.left)), \"samples\", sep =  \" \"),\n                             paste(as.character(length(upper.right)), \"samples\", sep =  \" \"), \n                             paste(as.character(length(lower.left)), \"samples\", sep =  \" \"),\n                             paste(as.character(length(lower.right)), \"samples\", sep =  \" \")), x =50, y = 0.07, size = 3.5) +\n  annotate(\"text\", label = c(\"a\",\"b\", \"c\", \"d\"), x =0, y = 0.15, size = 5, fontface =2) + \n  scale_fill_discrete(guide = guide_legend(ncol =  1, title = \"carbon type\"), labels = c(\"aliphatic\", \"aromatic\", \"carbonyl\")) +\n  labs(x = \"% Carbon\", y = \"Probability\")\n \nggsave(\"Figure1.pdf\", width = 7.5, height = 7.5)\n\n# Organizing the experimental data in a network ---------------------------\n#nom.data.column  <- \"NOM.type.detailed\"#what NOM column should be used for the analysis?\ng.data.nom.type <- adj.to.graph(d.data.nom.type[c(\"ENP\", nom.data.column)], d.data.nom.type$ENP)#Converting the dataset into a graph instance\nV(g.data.nom.type)$degree.lables.code <- label.node.degree(g.data.nom.type)#label nodes of highest degree, DOM with letters and PM with numbers\n\n#save the network structure to an external file\n#write.graph(graph = g.data.nom.type, format = \"pajek\", file = \"gDataNOMtype.net\")\nwrite.graph(graph = g.data.nom.type, format = \"graphml\", file = \"gDataNOMtype.graphml\")#this file format is easilt read by gephi\n# Network topology --------------------------------------------------------\n#Basic properties (more properties such as degree assortativity and diameter are calculated in the code section: Supporting Information comparison to random network)\nlength(d.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"])#numpber of publications\nsum(E(g.data.nom.type)$weight)#number of experiments (sum of links' weights)\nn.pm <- sum(V(g.data.nom.type)$type); n.pm#number of PM types (number of PM nodes)\nn.dom <- sum(V(g.data.nom.type)$type == FALSE); n.dom#number of DOM types (number of DOM nodes)\nn.comb.stud <- ecount(g.data.nom.type); n.comb.stud#number of unique DOM-PM combinations studied\ndensity  <- n.comb.stud/(n.pm*n.dom); signif(density, digits = 2)#network density\ntheor.density <- sum(E(g.data.nom.type)$weight)/(n.pm*n.dom);signif(theor.density, digits = 2)#theoretical/potential density\nn.pm*n.dom\nmax(E(g.data.nom.type)$weight)#the max number of times a given DOM-PM combination was studied\nmin(E(g.data.nom.type)$weight)#the min number of times a given combination was studied\nE(g.data.nom.type)[which.max(E(g.data.nom.type)$weight)]#DOM-PM combinations studied often\nE(g.data.nom.type)[E(g.data.nom.type)$weight == max(E(g.data.nom.type)$weight)]#DOM-PM combinations studied often\nE(g.data.nom.type)[E(g.data.nom.type)$weight == 1]#DOM-PM combinations studied less often\n\n# Figure 2 - network overview plus hists of degree and weight distributions ------------------\n#par(xpd = NA)\nm  <- rbind(\n  c(0.15, 0.7, 0.3, 1),#for the network,\n  c(0, 0.15, 0.1, 0.4),#for the PM legend\n  c(0, 0.15, 0.4, 0.7),#for the DOM legend\n  c(0.7, 0.8, 0.4, 0.7),#for the degree distribution\n  c(0.85, 0.95, 0.4, 0.7))#for the link weight distribution\npdf(\"Figure2.pdf\", width = 14, height = 7)#the figure will be saved under this name in the working directory\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0.1, 4))\nplot(g.data.nom.type, vertex.frame.color = V(g.data.nom.type)$frame.color, vertex.size = log(degree(g.data.nom.type))+3,\n     vertex.shape = V(g.data.nom.type)$shape, edge.width = E(g.data.nom.type)$width/4,\n     vertex.color = V(g.data.nom.type)$color,\n     vertex.label = V(g.data.nom.type)$degree.lables.code, vertex.label.cex = 1,\n     vertex.label.color = V(g.data.nom.type)$label.color, edge.curved = 0.1, main=\"\")\nlegend(-1.3,0.95,pch = c(21,22), col = c(\"dodgerblue4\",\"grey\"), pt.bg = c(\"light blue\",\"lightsalmon\"), text.col = c(\"dodgerblue4\",\"black\"),\n       legend = c(\"PM\",\"DOM\"), bty = \"n\", pt.cex = 2)\nmtext(\"a\", side = 3, line = -2, adj = 0.025, cex = 1, font = 2)#subfigure numbering\nscreen(2)\n#legend for the PM\nlegend(\"top\", pch = V(g.data.nom.type)$degree.lables.code[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == TRUE],\n       legend = V(g.data.nom.type)$name[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == TRUE], col = \"black\", cex = 0.7, y.intersp = 0.15, bty = \"n\")\nscreen(3)\n#legend for the DOM\nlegend(\"top\", pch = V(g.data.nom.type)$degree.lables.code[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == FALSE],\n       legend = V(g.data.nom.type)$name[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == FALSE], col = \"black\",cex = 0.7, y.intersp = 0.15, bty = \"n\")\nscreen(4)\npar(mar = rep(0.1, 4), cex = 0.7)\nhist(degree(g.data.nom.type), main = \"\", border = NA, col = \"grey\", xlim = c(0, 50), ann =FALSE, xaxt=\"n\", yaxt = \"n\", ylim = c(0, 200))\naxis(1, at = seq(0, 50, by = 10))#x axis ticks\naxis(2, at = seq(0, 200,by = 100))#y axis ticks\nmtext(\"Count\", side = 2, line = 2.2, adj = 0.5, cex = 0.6)#y axis annotation\nmtext(\"Node degree\", side = 1, line = 2.2, adj = 0.5, cex = 0.6)#x axis annotation\nmtext(\"b\", side = 3, line = -0.01, adj = 0.01, cex = 1, font = 2)#subfigure numbering\nscreen(5)\npar(new=TRUE)\npar(mar = rep(0.1, 4), cex = 0.7)\nhist(E(g.data.nom.type)$weight,main=\"\", border = NA, col = \"grey70\", ann =FALSE, xaxt=\"n\", yaxt = \"n\")\naxis(1, at = seq(1, 14, by = 3))#x axis ticks\naxis(2, at = seq(0, 400, by = 200),labels = seq(0, 400, by = 200))#y axis ticks\nmtext(\"Count\", side = 2, line = 2.2, adj = 0.5, cex = 0.6)#y axis annotation\nmtext(\"Link weight\", side = 1, line = 2.2, adj = 0.5, cex = 0.6)#x axis annotation\nmtext(\"c\", side = 3, line = -0.01, adj = 0.01, cex = 1, font = 2)#subfigure numbering\nclose.screen(all.screens = TRUE)\ndev.off()\n\n# Network evolution from 1990-2015 ----------------------------------------\n##In order to simulate the high- and low-diversity networks, a citation network is created where the DOM-PM combinations studied in each publication\n#are assigned as attributes to the respective node (that correspond to the DOI of that publication). Uncomment the lines below if you'd like to \n#recreate the citation network (but it requires the references list of each publication in a seperate file, these files should be located in the\n#folder: citation_network). Else, the already required citation network will be uploaded from the working directory as: \"g.cit.only\" variable.\n\n  #Creating the database for the network, where all origin (citing paper) is on the first column and targets (cited papers)\n  #are on the second column\n  # d.data.cit <- data.frame()#initializing an empty data frame\n  # doi.exper.relevant  <- unique(d.data.nom.type$DOI[d.data.nom.type$DOI != \"\"])\n  # all.files <- list.files(path = \"../citation_network\", pattern = \"^10\\\\..+?[^~]$\")#read in all files, excluding the copies that end with \"~\"\n  # all.files <- sapply(all.files, function(x) paste(\"../citation_network\", x, sep = \"/\"))#appending the file name to the path so it can be accessed from the current working directory\n  # for(i in 1:length(all.files)){\n  #   file <- read.delim(all.files[i], header = FALSE, quote = \"\")\n  #   #parent reference details:\n  #   origin.DOI <- tolower(gsub(\"^\\\\s+|\\\\s+$\", \"\", unlist(strsplit(as.character(file[1, ]), split = \" - \"))[2]))#obtaining the parent reference DOI and removing heading white spaces and making all lower case\n  #   origin.title <- sub(\"^\\\\s+\", \"\", unlist(strsplit(as.character(file[2, ]), split = \" - \"))[2])#obtaining the parent reference title and removing heading white spaces\n  #   #make a doi list:\n  #   list.doi <- sapply(1:nrow(file), function(x) {if(grepl(\"^DO.*?10.*\", as.character(file[x, ]))){tolower(gsub(\"^\\\\s+|\\\\s+$\", \"\", unlist(strsplit(as.character(file[x, ]), \"DO\\\\s+-\\\\s+\"))[2]))#obtaining the DOI and removing heading and trailing white spaces...\n  #   }else{NA}})\n  #   list.doi <- list.doi[!is.na(list.doi)]#remove NA entries\n  #   #print(length(list.doi))\n  #   d.data.cit <- rbind(d.data.cit, data.frame(rep(origin.DOI, length(list.doi)), list.doi))\n  #   #print(all.files[i])\n  # }\n  # colnames(d.data.cit) <- c(\"origin\",\"target\")\n  # #Building the citation network, directed, network: for only the DOIs present in the experiemntal network\n  # g.cit <- graph.data.frame(d.data.cit, directed = TRUE)\n  # #extract the DOIs that exist in the citation network:\n  # doi.exper.relevant = as.character(doi.exper.relevant)[as.character(doi.exper.relevant)%in%V(g.cit)$name]\n  # g.cit.only <- induced_subgraph(g.cit, vids = doi.exper.relevant)\n  # #attaching to each publication node the list of PM and DOM types it studied\n  # for(doi in doi.exper.relevant){\n  #   curr.reference <- as.character(unique(d.data.nom.type$reference[d.data.nom.type$DOI == as.character(doi)]))#taking the refernec name for the given doi, and later extract the materials of that reference name, this is done because of the structure of the database where each material combination is has the reference\n  #   #(mendely key identifier but for all experiemnts from the same reference there is only one DOI).\n  #   curr.comb <- d.data.nom.type[d.data.nom.type$reference == curr.reference[1],c(\"ENP\",nom.data.column)]#there could be more than oen combinations used, to have an NOM type extended instead of NOM type\n  #   V(g.cit.only)$material.employ[V(g.cit.only)$name == as.character(doi)] <- list(curr.comb)\n  # }\n  # save(g.cit.only, file = \"gcit.Rdata\")\n  # #creates a list of all possible DOM-PM combinations and save it to the working directory as Rdata file, uncomment to rerun if the database as changed,\n  # #else, it will be loaded as \"all.comb\" variable\n  # all.comb <- c()\n  # for(i in unique(d.data.nom.type$ENP)){\n  #   all.comb <- rbind(all.comb,data.frame(rep(i,length(unique(d.data.nom.type[,nom.data.column]))),unique(d.data.nom.type[,nom.data.column])))\n  # }\n  # all.comb <- unique(all.comb)#accumulate all the unique tested combinations\n  # colnames(all.comb) <- c(\"ENP\",nom.data.column)\n  # all.comb$comb <- paste(all.comb[[1]],all.comb[[2]],sep = \"-\")\n  # save(all.comb,file = \"allComb.Rdata\")\n\nload(\"gcit.Rdata\")#the data is stored in the variable: \"g.cit.only\"\nload(\"allComb.Rdata\")#the data is stored in the variable: \"all.comb\"\n###\n# The following code calculates the combinations diversity index over time for the empirical network and for the high- and low-diversity simulated networks\n###\nstart.year <- 1990#the year from which the simulations/analysis start\n#empirical network:\ng.empir.year <- adj.to.graph(d.data.nom.type[d.data.nom.type$year<= start.year,c(\"ENP\",nom.data.column)], names = unique(d.data.nom.type$ENP))#the empirical network at the year the analysis starts\nempir.diversity.time <- diversity.over.time(d.data.nom.type[ , c(\"ENP\",nom.data.column,\"year\")], start.year)#diversity over time for the detailed DOM column\nempir.diversity.DOMbroad <- diversity.over.time(d.data.nom.type[ , c(\"ENP\",\"NOM.type\",\"year\")], start.year)#diversity values when considering the broad definition of DOM\n#for the DOM by location, make every non standard humic substance unique:\n\nd.data.nom.type$NOM.by.location  <- as.character(d.data.nom.type$NOM.by.location)\nmodify.to.unique  <- c(\"sea water\", \"ground water\", \"surface water\", \"STP influent\", \"STP effluent\", \"river water\",\n                       \"swamp total DOC\", \"soil humic acid\", \"EPS\", \"drinking water total DOC\", \"peat soil total DOC\")#a list of DOM names that should be made unique under the assumption that each nonstandard DOM is unique\n#go over all the DOM and if are int he ebove list from different DOI then paste the given DOI as a unique identifier, since all other are already specificed by location in this column\nfor(i in unique(as.character(d.data.nom.type$reference))){\n  dom.to.modify  <- d.data.nom.type[d.data.nom.type$reference == i, \"NOM.by.location\"]#all the DOM that reported in a given reference\n  for(j in unique(as.character(dom.to.modify))){#for each DOM specified for the given reference\n    if(j %in% modify.to.unique){\n      d.data.nom.type[as.character(d.data.nom.type[ , \"NOM.by.location\"]) == j & as.character(d.data.nom.type$reference) == i, \"NOM.by.location\"]  <- paste(j, i, sep = \"__\")\n}}}\nlength(d.data.nom.type$NOM.by.location)#How many DOM types are there, when non standard humic substances are treated as unique by location?\n\nempir.diversity.DOMbyloc <- diversity.over.time(d.data.nom.type[ , c(\"ENP\",\"NOM.by.location\",\"year\")], start.year)#diversity values when considering the DOM definition by location (for humic substances)\n\n#Linear regression of the empir.diversity values:\nd.diversity  <- data.frame(diversity = empir.diversity.time, time = 1:length(empir.diversity.time))\nlm.diversity  <- lm(diversity ~ time, data = d.diversity)\nsummary(lm.diversity)\ntsdisplay(resid(lm.diversity))\ntsdisplay(resid(ar.burg(ts(resid(lm.diversity)), order.max = 1)))#can an AR(1) process explain the dependency structrue in the residuals? yes, they form white noise\ncorStruc  <- corARMA(form = ~time, p = 1)#define the correlation structure of the residuals\ngls.data <- gls(model = diversity ~ time, data = d.diversity, correlation = corStruc)#fit a generalized least square using an AR(1) correlation structure of the residuals.\nsignif(confint(gls.data), digits = 3)#the 95% confidence interval\nsignif(coef(gls.data)[1], digits = 3)#the intercept in 3 significant digits\nsignif(coef(gls.data)[2], digits = 3)#the slope in 3 significant digits\n  \n#simulated networks:\n##one simulation: obtaining network structures\ng.high.list <- change.graph.trend(g.cit.only, start.year, d.data.nom.type, 1, seed = 1)#high repetition from the 90th (low diversity)\ng.high.rep  <- diversity.over.time(g.high.list,start.year)[length(empir.diversity.time)]#diversity of the high repetition (low diversity) network at the last time step\ng.high <- adj.to.graph(g.high.list[ , 1:2], names = unique(g.high.list$ENP))#the high repetition network (low diversity) at the end of the simulation (the latest year of published experiment in the database)\n#g.high <- g.high.list[[1]]#the high repetition network (low diversity) at the end of the simulation (the latest year of published experiment in the database)\ng.low.list <- change.graph.trend(g.cit.only, start.year, d.data.nom.type, 0, seed = 1)#low repetition from the 90th (high diversity)\ng.low.rep <- diversity.over.time(g.low.list,start.year)[length(empir.diversity.time)]#diversity of low repetition (high diversity) at the last time step\ng.low <- adj.to.graph(g.low.list[ , 1:2], names = unique(g.low.list$ENP))#the low repetition network (high diversity) at the end of the simulation (the latest year of published experiment in the database)\n\n#   #Uncomment in case you'd like to simulate again the high and low diversity networks, else the ready csv files will be read from the working directories for ploting the results\n#   s.sample <- 1000#number of simulated network for high and low repetition (low and high diversities, respectively)\n#   #printing the results into file as the loop runs, also the dataframe will be need to be transposed once it is loaded again into R:\n#   sapply(774:1000, function(x) {print(x); g.low.list <- change.graph.trend(g.cit.only, start.year, d.data.nom.type, 0, seed = x);\n#                              write.table(t(diversity.over.time(g.low.list, start.year)),\n#                              file = \"high_diversity.csv\", append = TRUE, sep=\",\", col.names = FALSE, row.names = FALSE)})\n#   sapply(97:1000,function(x) {print(x);g.high.list <- change.graph.trend(g.cit.only, start.year, d.data.nom.type, 1, seed = x);\n#                               write.table(t(diversity.over.time(g.high.list, start.year)),\n#                               file = \"low_diversity.csv\", append = TRUE, sep=\",\", col.names = FALSE, row.names = FALSE)})\n\nhigh.diversity  <- t(read.csv(\"high_diversity.csv\", header = FALSE))#read in the high diversity simulated values\nlow.diversity  <- t(read.csv(\"low_diversity.csv\", header = FALSE))#read in the low diversity simulated values\n\n#Diversity of ENP and DOM individualy (materials' diverstity):\npm.diversity <- sapply(1990:2015,function(x) length(unique(d.data.nom.type$ENP[d.data.nom.type$year <= x]))/nrow(d.data.nom.type[d.data.nom.type$year <= x,]))\ndom.diversity <- sapply(1990:2015,function(x) length(unique(d.data.nom.type[d.data.nom.type$year <= x, nom.data.column]))/nrow(d.data.nom.type[d.data.nom.type$year <= x,]))\npm.diversity.type <- sapply(1990:2015,function(x) length(unique(d.data.nom.type$ENP.type[d.data.nom.type$year <= x]))/nrow(d.data.nom.type[d.data.nom.type$year <= x,]))\ndom.diversity.type <- sapply(1990:2015,function(x) length(unique(d.data.nom.type$NOM.type[d.data.nom.type$year <= x]))/nrow(d.data.nom.type[d.data.nom.type$year <= x,]))\n#the number of experiments in the last decrease period 2012-2015:\nnrow(d.data.nom.type[d.data.nom.type$year >= 2012, ])\nsignif(nrow(d.data.nom.type[d.data.nom.type$year >= 2012, ])/nrow(d.data.nom.type), digits = 2)#the fraction of experiments in the last period\n\n# Systemic trends in the experimental diversity - variables prep. ---------\n#all contingency tables for the analysis are be between the years 1990-2015\nd.data.nom.type.1990 <- d.data.nom.type[d.data.nom.type$year >= 1990, ]\nrequired.years <- 1990:2015\n\n# Systemic trends in experimental designs - DOM types temporal trends ---------------\n#unaggregated DOM:\ndom.type2.freq <- table(d.data.nom.type.1990$NOM.type.detailed, d.data.nom.type.1990$year)\ndom.type2.freq <- dom.type2.freq[!rownames(dom.type2.freq) == \"\", ]#remove empty rows\ndom.type2.freq <- table.check(dom.type2.freq, required.years)\n#order the DOM types according to group-1 DOM, group-2 DOM and water samples:\ndom.type.match <- unique(d.data.nom.type[ , c(\"NOM.type.detailed\", \"NOM.type\")])#match each dom to its type\norder.dom.type2.freq <- unlist(sapply(rownames(dom.type2.freq), function(x) {\n  t <- as.character(dom.type.match$NOM.type[as.character(dom.type.match$NOM.type.detailed) == x][1])\n  if(t%in%group1.dom){return(1)}\n  if(t%in%water.samples){return(0)}\n  if(t%in%group2.dom){return(2)}\n  }))\norder.dom.type2.freq <- sort(order.dom.type2.freq)\no <- match(names(order.dom.type2.freq), rownames(dom.type2.freq))\n\ndom.type2.freq <- dom.type2.freq[o, ]\n#color based on group1, group2 and water samples:\n#group1.dom.colors <- colorRampPalette(c(\"blue\", \"darkorchid1\"))(sum(order.dom.type2.freq == 1))\ngroup1.dom.colors <- colorRampPalette(c(\"red2\", \"gray27\"))(sum(order.dom.type2.freq == 1))\n#for group 1 color differently things coming out of river and differently things coming out of soil and sigma aldrich humic acid:\ngroup1.dom.river.hs <- which(rownames(dom.type2.freq)[order.dom.type2.freq == 1]%in% c(\"river humic acid\", \"river fulvic acid\", \"river total DOM\", \"river humic substance\"))\ngroup1.dom.river.hs.col <- colorRampPalette(c(\"lightskyblue\", \"lightskyblue2\"))(length(group1.dom.river.hs))\nfor(i in 1:length(group1.dom.river.hs)){\n  group1.dom.colors[group1.dom.river.hs[i]] <- group1.dom.river.hs.col[i]\n}\n\n#group2.dom.colors <- colorRampPalette(c(\"green\", \"firebrick1\"))(sum(order.dom.type2.freq == 2))\ngroup2.dom.colors <- colorRampPalette(c(\"seagreen3\", \"seagreen3\"))(sum(order.dom.type2.freq == 2))\n#water.samples.colors <- colorRampPalette(c(\"orange\", \"yellow\"))(sum(order.dom.type2.freq == 0))\nwater.samples.colors <- colorRampPalette(c(\"orange1\", \"orange1\"))(sum(order.dom.type2.freq == 0))#all water samples in one color\ndom.type2.freq.col <- c(water.samples.colors, group1.dom.colors, group2.dom.colors)\n#dom.type2.freq.col <- rainbow(nrow(dom.type2.freq), s = 0.7)\ndom.max.use.2012.2015 <- sort(apply(dom.type2.freq, 1, sum), decreasing = T)[1:5]#names of DOM most used between 2012:2015\ndom.max.use.2012.2015.col <- unlist(sapply(names(dom.max.use.2012.2015), function(x) dom.type2.freq.col[rownames(dom.type2.freq) == x]))\ndom.max.use.2012.2015.names <- c(names(dom.max.use.2012.2015), \"water samples\",\"group-2 DOM\")#adding gruop 2 DOM\ndom.max.use.2012.2015.col <- c(dom.max.use.2012.2015.col, \"orange1\",\"seagreen3\")\n\n\n#aggregate the DOM data into larger groups:\nsaccharides <- c(\"polysaccharide\", \"gum arabic\", \"disaccharide\")\nd.data.nom.type.1990$NOM.type.3 <- sapply(as.character(d.data.nom.type.1990$NOM.type), function(x) {\n  if(x%in%water.samples){return(\"water sample\")}\n  if(x%in%saccharides){return(\"saccharides\")}\n  if(x%in%group1.dom){return(\"group-1 DOM\")}\n  else{return(x)}\n})\n\ndom.type3.freq <- table(d.data.nom.type.1990$NOM.type.3, d.data.nom.type.1990$year)\n#anacdotal DOM to remove from figure:\n#dom.type3.freq <- dom.type3.freq[!row.names(dom.type3.freq)%in%c(\"chelating agent\", \n #                                                                \"surfactant\", \"vitamine\", \"fatty acid\", \"glycolipid\", \"polyphenol\", \"polymer\"), ]\ndom.types3.freq.col <- rainbow(length(rownames(dom.type3.freq)), s = 0.7)\ndom.type3.freq <- table.check(dom.type3.freq, required.years)\n\n#\n#only humic substances:\nd.data.nom.type.1990$NOM.type2 <- sapply(as.character(d.data.nom.type.1990$NOM.type), \n                                         function(x) if(x %in% group1.dom){return(\"group-1 DOM\")}else{return(x)})\n\n#devision only of the humic substances:\nd.data.humic.sub <- d.data.nom.type.1990[d.data.nom.type.1990$NOM.type2 == \"group-1 DOM\", ]\nd.data.humic.sub$NOM.type.detailed <- as.character(d.data.humic.sub$NOM.type.detailed)\n#hs.type.freq <- table(d.data.humic.sub$NOM.type.detailed, d.data.humic.sub$year)\n\n#divide the materials according to PCA analysis:\nfresh.water.fulvic.acid <- c(\"ground water fulvic acid\", \"lake fulvic acid\", \"river fulvic acid\", \"small stream fulvic acid\",\n                             \"surface water fulvic acid\", \"ground water fulvic acid\", \"wetland fulvic acid\")\nfresh.water.humic.acid <- c(\"lake humic acid\", \"river humic acid\", \"ground water humic acid\", \"wetland humic acid\")\nfresh.water.nom <- c(\"swamp total DOM\", \"river total DOM\", \"lake total DOM\",\n                     \"small stream total DOM\", \"drinking water total DOM\", \"surface water DOM\",\n                     \"wetland total DOM\")\nfresh.water.humic.substance <- c(\"river humic substance\", \"wetland humic substance\", \"lake humic substance\")\nfresh.water.nonhumic.fraction <- c(\"lake hydrophilic acid\", \"wetland hydrophilic neutral\", \"wetland hydrophilic acid\", \"hydrophobic neutral\",\n                                   \"river hydrophilic acid\")\nd.data.humic.sub$NOM.type.agg <- sapply(d.data.humic.sub$NOM.type.detailed, function(x){\n  if(x%in%fresh.water.fulvic.acid){return(\"fresh water fulvic acid\")}\n  if(x%in%fresh.water.humic.acid){return(\"fresh water humic acid\")}\n  if(x%in%fresh.water.nom){return(\"fresh water NOM\")}\n  if(x%in%fresh.water.humic.substance){return(\"humic substance\")}\n  if(x%in%fresh.water.nonhumic.fraction){return(\"non humic fraction\")}\n  #if(x%in%wetland.nom){return(\"wetland NOM\")}\n  else{return(x)}\n})\n#anacdotal DOM to remove:\ndom.types.remove <- c(\"unspecific humic acid\", \"unspecific fulvic acid\", \"mixed fulvic and humic aldrich acids\"\n                      ,\"synthetic humic acid\", \"synthetic fulvic acid\", \"plant humic acid\", \"DOM coating\")#anacdotal DOM to remove\nhs.type.freq <- table(d.data.humic.sub$NOM.type.agg, d.data.humic.sub$year)\nhs.type.freq <- hs.type.freq[!rownames(hs.type.freq)%in%dom.types.remove, ]\n\nhs.type.freq <- table.check(hs.type.freq, required.years)#make sure all years 1990-2015 are represented\n\nhs.type.freq.col <- c(\"blueviolet\", \"darkorchid1\", \"darkorchid4\", \"gray36\", \"gold\", \"darkslategray1\", \"darkslategray3\", \"lightskyblue\",\n                      \"khaki2\", \"khaki3\", \"lightsalmon\", \"lightsalmon3\", \"mistyrose1\", \"mistyrose3\", \"goldenrod3\", \"olivedrab3\",\n                      \"navajowhite3\", \"navajowhite4\", \"palegoldenrod\", \"palevioletred1\", \"palevioletred3\", \"pink3\", \"darkorange\")\n#hs.type.colors <- data.frame(type = row.names(hs.type.freq), col = hs.type.colors.list)\n\n#now break down the identity of the fresh water humic substances:\nfresh.water.hs.freq <- table(d.data.humic.sub$NOM.type.detailed[d.data.humic.sub$NOM.type.agg%in%c(\"fresh water fulvic acid\", \"fresh water humic acid\",\n                                                                                                   \"fresh water NOM\")], \n                             d.data.humic.sub$year[d.data.humic.sub$NOM.type.agg%in%c(\"fresh water fulvic acid\", \"fresh water humic acid\",\n                                                                                      \"fresh water NOM\")])\n#anacdotal fresh water DOM to remove:\n#fresh.water.hs.freq <- fresh.water.hs.freq[!rownames(fresh.water.hs.freq)%in% c(\"surface water DOM\", \"surface water fulvic acid\"), ]\nfresh.water.hs.freq <- table.check(fresh.water.hs.freq, required.years)#make sure all required columns are present\nfresh.water.hs.freq.col <- rainbow(nrow(fresh.water.hs.freq), s = 0.7)\n\n# Systemic trends in experimental design - PM types temporal trends ----------------\n#\n#temporal trend in the PM types used by core material:\npm.core.type.freq <- table(d.data.nom.type.1990$ENP.type, d.data.nom.type.1990$year)\npm.core.type.freq <- pm.core.type.freq[!row.names(pm.core.type.freq) == \"\", ]#remove rows with name \"\"\n#type.order <- rownames(pm.core.type.freq)#before removing anacdotal instances since they will show up in the detailed description\npm.core.type.freq <- pm.core.type.freq[!row.names(pm.core.type.freq)%in%c(\"boron\", \"silicon\"), ]#remove anacdotal PM types\npm.core.type.freq <- table.check(pm.core.type.freq, required.years)\npm.core.type.freq.col <- c(\"cornflowerblue\", \"darkgoldenrod2\", \"brown2\", \"darkolivegreen3\", \"hotpink3\", \n                           \"sienna2\", \"navajowhite2\", \"seagreen4\", \"orangered\")#, \"lightsteelblue3\", \"darkorange1\")\n#pm.types.colors <- data.frame(type = rownames(pm.type.freq), col = colors)\n#How many of the materials in the last years are the same material but coated one? how many are unique core?\n#\n#temporal trend in the PM types used by coating and chemical compound:\npm.specif.freq <- table(d.data.nom.type.1990$ENP, d.data.nom.type.1990$year)\npm.specif.freq <- table.check(pm.specif.freq, required.years)\npm.specif.freq <- pm.specif.freq[!rownames(pm.specif.freq) == \"\", ]#remove first row since its empty\n#reorder pm.specif.freq according to the types order in pm.core.type.freq:\n#mapping materials to their types:\nenp.type.order <- 1:length(unique(d.data.nom.type$ENP.type))\nnames(enp.type.order) <- as.character(sort(unique(d.data.nom.type$ENP.type)))\nmaterial.type.map <- unlist(sapply(rownames(pm.specif.freq), function(x){\n  t <- as.character(d.data.nom.type.1990$ENP.type[d.data.nom.type.1990$ENP == x])[1]\n  return(as.numeric(enp.type.order[names(enp.type.order) == t][1]))\n  }))\nlength(material.type.map)\nmaterial.type.map <- sort(material.type.map)\nrows.order <- match(names(material.type.map), rownames(pm.specif.freq))\n#material.type.map <- material.type.map[rows.order]\npm.specif.freq <- pm.specif.freq[rows.order, ]\n#pm.specif.freq.col <- rainbow(nrow(pm.specif.freq), s = 0.7)\n# pm.type.col.ranges <- data.frame(start = c(\"orchid\", \"orangered\", \"orange4\", \"gray1\", \"lightblue\",\n#                                   \"palegreen\", \"rosybrown\", \"gold\", \"deeppink\", \"darksalmon\", \"green4\"),\n#                end = c(\"orchid4\", \"orangered4\", \"orange\", \"gray5\", \n#                       \"royalblue4\", \"palegreen4\", \"rosybrown4\", \"goldenrod4\", \"deeppink4\", \"indianred2\", \"green4\"))\n#matching the colors to the types, such that all non metal and non metal oxide are the maroon2 color. See ''enp.type.order'' variable for the matches\npm.type.col.ranges <- data.frame(start = c(rep(\"maroon2\", 3), \"lightblue\", rep(\"maroon2\", 2), \"gold\", rep(\"maroon2\", 4)),#monochromatic color for non metal and non metal oxides\n                                 end = c(rep(\"maroon2\", 3), \"royalblue4\", rep(\"maroon2\", 2), \"goldenrod4\", rep(\"maroon2\", 4)))\n\npm.specif.freq.col <- c()\nfor(i in 1:(length(enp.type.order))){\n  pm.specif.freq.col <- c(pm.specif.freq.col, colorRampPalette(c(as.character(pm.type.col.ranges$start[i]), \n                                               as.character(pm.type.col.ranges$end[i])))(sum(as.numeric(material.type.map) == i)))\n}\n#color all the non metal and non metal oxide in one color\n\n#d.ps.specif.freq <- data.frame(name = rownames(pm.specif.freq), col = pm.specif.freq.col)\n#display only the top 10 most used materials:\nnames(pm.specif.freq) <- rownames(pm.specif.freq)\nmax.names.specif.pm <- names(sort(apply(pm.specif.freq[, as.character(2012:2015)], 1,  sum), decreasing = T)[1:5])\nmax.names.specif.pm.type <- sapply(max.names.specif.pm, function(x) material.type.map[names(material.type.map) == x])\nmax.names.specif.pm <- max.names.specif.pm[order(max.names.specif.pm.type, decreasing = T)]\n#max.names.specif.pm <- c(\"ZnO\", \"TiO2\", \"Fe2O3\", \"pvp-Ag\", \"cit-Ag\", \"cit-Au\", \"pvp-Ag\")#manual ordering, because I am just tired!\nmax.colors.spec.pm <- unlist(sapply(max.names.specif.pm, function(x) pm.specif.freq.col[rownames(pm.specif.freq) == x]))\nmax.names.specif.pm <- c(max.names.specif.pm, \"non metal and non metal oxides\")\nmax.colors.spec.pm <- c(max.colors.spec.pm, \"maroon1\")\n\n\n# Figure 3 new- diversity evolution 1990-2015 --------------------------------\nmin.years <- c(TRUE,sapply(2:(length(empir.diversity.time)-1), function(x) (empir.diversity.time[x] < empir.diversity.time[x-1] \n                                                                            & empir.diversity.time[x] < empir.diversity.time[x +1])),FALSE)#years of min repetition (local min)\nmax.years <- c(FALSE,sapply(2:(length(empir.diversity.time)-1), function(x) (empir.diversity.time[x] > empir.diversity.time[x-1] \n                                                                             & empir.diversity.time[x] > empir.diversity.time[x +1])),TRUE)#years of max repetition (local max)\ntime.axis <- start.year:max(d.data.nom.type$year)#x axis values\n\n#par(xpd = NA)\n\nm  <- rbind(c(0.1, 0.9, 0.55, 0.95),#main plot combination diversity\n            c(0.08, 0.84, 0.3, 0.5),#temporal trends in DOM frequency\n            c(0.08, 0.84, 0.1, 0.29))#temporal trends in the PM frequncy\nm  <- rbind(c(0.1, 0.9, 0.5, 0.99),#main plot combination diversity\n            c(0.08, 0.84, 0.3, 0.45),#temporal trends in DOM frequency\n            c(0.08, 0.84, 0.1, 0.29))#temporal trends in the PM frequncy\n\npdf(\"Figure3.pdf\")\nsplit.screen(m)\nscreen(1)\npar(mar = c(0, 0, 0, 0), cex.axis = 0.7)\nplot(time.axis, empir.diversity.time, xlab = \"year\", ylab = \"H(W)\", col = \"tomato\", pch = 8,\n     ylim = c(0,1.1), xlim = c(start.year,2018), bty = \"l\", ann=FALSE, xaxt=\"n\")\naxis(1, at = seq(1990, 2015, by =5), labels = FALSE)\nmtext(expression(\"Combinations diversity index D\"[comb]), side = 2, line = 2.2, adj = 0.5, cex = 1)#y axis annotation\n\nrect(time.axis[min.years], xright = time.axis[max.years], ybottom = 0, col = \"#80808005\", ytop = max(high.diversity), border = NA)#periods of repetition, in col the last digits are for transperancy\n\npolygon(c(rev(time.axis), time.axis), c(rev(empir.diversity.DOMbyloc), empir.diversity.DOMbroad), col = '#FA585810',ylim = c(0.2,1),border = NA)#variation due to the different definition of DOM in the dataset, too detialed definition and coarse definitions results in a substantial vairation in the diversity index\npar(new=T)\nboxplot(t(high.diversity), axes=F, ylab=\"\", xlab=\"\", col = NA, border = \"#80808070\", boxwex = 0.7, at = time.axis, add = TRUE, cex = 0.7)\npar(new=T)\nboxplot(t(low.diversity), axes=F, ylab=\"\", xlab=\"\", col = NA, border = \"#80808070\", boxwex = 0.7, at = time.axis, add = TRUE, cex = 0.7)\n#panel numbering:\ntext(x = start.year, y = 1.1, label = \"a\", font = 2)#subfigure numbering for the start year network\n#subfigures numbering:\ntext(x = start.year -0.5, y = 1, label = \"1\", font = 2)#subfigure numbering for the start year network\ntext(x = 2015, y = g.low.rep + 0.07, label = \"2\", font = 2)#subfigure numbering for high diversity network\ntext(x = 2015, y = empir.diversity.time[length(time.axis)] + 0.1, label = \"4\", font = 2)#subfigure numbering for the empirical network\ntext(x = 2015, y = g.high.rep + 0.1, label = \"3\",font = 2)#subfigure numbering for the low diversity network\npar(fig = c(0.13, 0.22, 0.80, 0.98), new=T)\nplot(g.empir.year, vertex.frame.color = NA, vertex.size = 5, vertex.shape = V(g.empir.year)$shape, vertex.label =\"\", edge.width = sqrt(E(g.empir.year)$width), vertex.color = \"black\")\npar(fig = c(0.75, 1, 0.85, 0.98), new=T)\nplot(g.low, vertex.frame.color = NA, vertex.size = 5, vertex.shape = V(g.high)$shape, vertex.label =\"\", edge.width = sqrt(sqrt(E(g.high)$width)), vertex.color = \"black\")#high diversity network (low repetition)\npar(fig = c(0.75, 1, 0.7, 0.83), new=T)\nplot(g.data.nom.type, vertex.frame.color = NA, vertex.size = 5, vertex.shape = V(g.data.nom.type)$shape,vertex.label = \"\", edge.width = sqrt(E(g.data.nom.type)$width), vertex.color =  \"black\")\npar(fig = c(0.75, 1, 0.55, 0.68),new=T)\nplot(g.high, vertex.frame.color = NA, vertex.size = 5, vertex.shape = V(g.low)$shape,vertex.label = \"\", edge.width = sqrt(E(g.low)$width)+1, vertex.color = \"black\")#low diversity network\nscreen(2)\npar(mar = c(0.1, 0.1, 0.1, 0.1), cex.axis = 0.7)\n#br <- barplot(dom.type3.freq, las = 2, col = as.character(dom.types3.freq.col), border = NA, xaxt = \"n\", ann=FALSE, bty = \"u\", axes=F, xpd = TRUE)\nbr <- barplot(dom.type2.freq, las = 2, col = dom.type2.freq.col, border = NA, xaxt = \"n\", ann=FALSE, bty = \"u\", axes=F, xpd = TRUE)\naxis(4, line = -0.9)\n#mtext(\"Number of experiments\", side = 4, line = 1, adj = 0.5, cex = 0.8)#y axis annotation\n#legend(x = br[11], y = 130, legend = rownames(dom.type3.freq), fill = as.character(dom.types3.freq.col),\n #      border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.7, title = \"DOM\", cex = 0.6)\n  legend(x = br[11], y = 130, legend = dom.max.use.2012.2015.names, fill = dom.max.use.2012.2015.col,\n       border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.7, title = \"DOM\", cex = 0.6)\npar(new = T)\nplot(dom.diversity, type = \"l\", bty = \"n\", ylim = c(0.01, 0.5), ylab = \"diversity\", ann=FALSE, axes =FALSE)\naxis(2, line = -0.9)\n#mtext(expression(\"Material diversity index D\"[mat]), side = 2, line = 1.7, adj = 0.5, cex = 0.8)#y axis annotation\ntext(x = 1.7, y = 0.5, label = \"b\", font = 2)#subfigure numbering for the start year network\nscreen(3)\npar(mar = c(0.1, 0.1, 0.1, 0.1), cex.axis = 0.7)\n#br <- barplot(pm.core.type.freq, ann=FALSE, ylab = \"\", xlab = \"\", col = pm.core.type.freq.col, axes=F, \n #             xpd = TRUE, border =NA, bty = \"l\", xaxt = \"n\")\nbr <- barplot(pm.specif.freq, ann=FALSE, ylab = \"\", xlab = \"\", col = pm.specif.freq.col, axes=F, \n              xpd = TRUE, border =NA, bty = \"l\", xaxt = \"n\")\naxis(4, line = -0.9)\nmtext(\"Number of experiments\", side = 4, line = 1, adj = -4.5, cex = 0.8)#y axis annotation\n#using in legends the most studied ones\n#legend(x = br[11], y = 130, legend = rownames(pm.core.type.freq), fill =pm.core.type.freq.col, border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.7,\n #      title = \"PM core material\", cex = 0.6)\nlegend(x = br[11], y = 120, legend = max.names.specif.pm, fill = max.colors.spec.pm, border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.7,\n       title = \"PM\", cex = 0.6)\naxis(1, at = br[seq(1, 26, by = 5)], labels = c(\"1990\", \"1995\", \"2000\", \"2005\", \"2010\", \"2015\"))\npar(new = T)\nplot(pm.diversity, type = \"l\", bty = \"n\", ylim = c(0.01, 0.5), ylab = \"diversity\", ann=FALSE, axes =FALSE)\naxis(2, line = -0.9)\nmtext(expression(\"Material diversity index D\"[mat]), side = 2, line = 1.7, adj = -1.2, cex = 0.8)#y axis annotation\ntext(x = 1.7, y = 0.5, label = \"c\", font = 2)#subfigure numbering for the start year network\nmtext(\"Year\", side = 1, line = 2.2, adj = 0.5, cex = 1)#y axis annotation\nclose.screen(all.screens = TRUE)\ndev.off()\n\n# Systematic trends in experimental designs - PM coating effect-------------------------------\n###\n# The following compares the degree and weight distributions of coated vs. uncoated PM nodes\n###\n\npm.names  <- V(g.data.nom.type)$name[V(g.data.nom.type)$type]\npm.with.coating <- sapply(pm.names, function(x) {if(grepl(x, pattern = \"-\")){return(\"orange\")}else{return(\"seagreen3\")}})#these are all PM with a \"-\" symbol, later on make sure that it is not part of the name of an extended PM that has no coating, for now assume \"-\" seperates coating from core\n\nV(g.data.nom.type)$coating.color <- \"#58585830\"#the default color for nodes \nV(g.data.nom.type)$coating.color[V(g.data.nom.type)$type] <- pm.with.coating#modify the colors of PM nodes according to their coating/lack of\n\n#number of coated PM:\nsum(V(g.data.nom.type)$coating.color == \"orange\")\n#number of uncoated PM:\nsum(V(g.data.nom.type)$coating.color == \"seagreen3\")\n\ncoating.analysis  <- data.frame(deg = degree(g.data.nom.type)[V(g.data.nom.type)$type], coat = V(g.data.nom.type)$coating.color[V(g.data.nom.type)$type])\ncoating.analysis$coat  <- factor(coating.analysis$coat,levels=c(\"seagreen3\", \"orange\"))#the order of the factor level \"coating factor\" should be rearranged such that the uncoated (seegreen3) material will be first\n#nrow(coating.analysis) == sum(V(g.data.nom.type)$type)#just to make sure only the PM nodes are analyzed\ndegree.coated.stat  <- wilcox.test(coating.analysis$deg~coating.analysis$coat, paired = FALSE, alternative = \"greater\", exact = F)# degree is significanlty larger for the uncoated materials, think of performing a non parametric test for two samples, a non parameteric equivalent for two sample t test\n#max degree of coated and uncoated PM:\nmax(coating.analysis$deg[coating.analysis$coat == \"seagreen3\"])\nmax(coating.analysis$deg[coating.analysis$coat == \"orange\"])\n####calculate the number of experiments (sum of all links weights) for coated and uncoated materials\n#omitting the highly used coated PM:\nlink.coat.nocitAg  <- sapply(get.edgelist(g.data.nom.type)[ ,1] , function(x) {if(x%in%V(g.data.nom.type)$name[V(g.data.nom.type)$coating.color == \"orange\"] & (x != \"cit-Ag\" &\n                                                                                                                                                                x != \"cit-Au\" & x != \"pvp-Ag\")){return(TRUE)}else{return(FALSE)}})\nedge.list = get.edgelist(g.data.nom.type)\nn.expr.coated  <- unlist(sapply(V(g.data.nom.type)$name[V(g.data.nom.type)$type == TRUE],function(x) {rel.edges  <- sum(E(g.data.nom.type)$weight[which(edge.list[,1] == x)])\nif(x%in%V(g.data.nom.type)$name[V(g.data.nom.type)$coating.color == \"orange\"] & (x != \"cit-Ag\" & x != \"cit-Au\" & x != \"pvp-Ag\")){return(rel.edges)}}))\nn.expr.uncoated  <- unlist(sapply(V(g.data.nom.type)$name[V(g.data.nom.type)$type == TRUE], function(x) {rel.edges  <- sum(E(g.data.nom.type)$weight[which(edge.list[,1] == x)])\nif(V(g.data.nom.type)$coating.color[V(g.data.nom.type)$name == x] == \"seagreen3\"){return(rel.edges)}}))\n\nweight.coated.stat.nocit  <- wilcox.test(n.expr.uncoated, n.expr.coated, paired = FALSE, alternative = \"greater\", exact = F)\nd.coated.nocit  <- data.frame(link = E(g.data.nom.type)$weight, coated = link.coat.nocitAg)\n\n# Figure 4 - PM coating effect --------------------------------------------\n#to plot the figure execute first:\npar(xpd = NA)\nm  <- rbind(c(0.1, 0.9, 0.29, 0.9),#for the network\n            c(0.2, 0.5, 0.1, 0.25),#for the degree barplot\n            c(0.6, 0.9, 0.1, 0.25))#for the edge weight barplot\n#and then the following lines:\nsplit.screen(m)\npdf(\"Figure4.pdf\")\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0,4))\nplot(g.data.nom.type, vertex.frame.color = NA, vertex.size = sqrt(degree(g.data.nom.type))+3, vertex.label = \"\", vertex.shape = V(g.data.nom.type)$shape, edge.width = E(g.data.nom.type)$width/4, vertex.color = V(g.data.nom.type)$coating.color)\nlegend(\"topleft\", legend =c(\"coated PM\", \"PM with\\nunspecified\\ncoating\", \"DOM\"), col = c(\"orange\", \"seagreen3\", \"#58585850\"), pch = c(16, 16, 15), cex = 0.7, bty = \"n\", border = \"white\", pt.cex = 2, y.intersp = 1.5)#is the vertical space between lines in the legend\nmtext(\"a\", side = 3, line = -0.5, adj = 0.01, cex = 1,font = 2)#subfigure numbering\nscreen(2)\npar(mar = rep(0, 4),cex = 0.7)\nboxplot(coating.analysis$deg ~ coating.analysis$coat, col = c(\"seagreen3\", \"orange\"), names = c(\"Coating not\\nspecified\", \"Coated\"), ylab = \"Number of DOM types\", log = \"y\", boxwex = 0.4)\nlegend(\"topright\", paste(\"p value = \", as.character(signif(digits = 3, degree.coated.stat$p.value)), sep = \" \"), bg=\"white\", cex = 0.9)\nmtext(\"Number of DOM types\", side = 2, line = 2.2, adj = 0.5, cex = 0.8)#y axis annotation\nmtext(\"b\", side = 3, line = -1.2, adj = 0.02, cex = 1, font = 2)#subfigure numbering\nscreen(3)\npar(mar = rep(0, 4), cex = 0.7)\n\nboxplot(n.expr.uncoated, n.expr.coated, col = c(\"seagreen3\", \"orange\"), names = c(\"Coating not\\nspecified\", \"Coated\"), ylab = \"NUmber of experiments\", log = \"y\", boxwex = 0.4)\n\nlegend(\"topright\",paste(\"p value = \", as.character(signif(digits = 3,weight.coated.stat.nocit$p.value)),sep = \" \"),bg=\"white\",border = \"n\",cex = 0.9)\nmtext(\"Number of experiments\", side = 2, line = 2.2, adj = 0.5, cex = 0.8)#y axis annotation\nmtext(\"c\", side = 3, line = -1., adj = 0.02, cex = 1, font = 2)#subfigure numbering\ndev.off()\nclose.screen(all.screens = TRUE)\n\n\n# Supporing Information ---------------------------------------------------\n################################################\n\n\n# Consistency of reported DOM parameters ------------------------------------\n\n\n#DOM purchased from the International Humic substances Society:\n  # d.papers.char <- read.csv(\"../newdata/papers_summary.csv\", header = T)\n  # d.papers.char <- data.frame(apply(d.papers.char, 2, endofline.remover))#remove potentialy leading and trailing \"\\n\" symbols:\n  # save(d.papers.char, file = \"summary_papers.Rdata\")\n\nload(\"summary_papers.Rdata\")#the variable is loaded as: \"d.papers.char\"\n#papers not in the papers characterization database:\nd.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"][!unique(tolower(as.character(d.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"])))%in%tolower(as.character(d.papers.char$DOI))]\n#papers in the characterization database but not in the dom-pm database:\ntolower(as.character(d.papers.char$DOI))[!tolower(as.character(d.papers.char$DOI))%in%unique(tolower(as.character(d.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"])))]\n\nd.papers.char <- data.frame(apply(d.papers.char, 2, na.zero)) #replace NA with zeros)\n#elements for the flow chart:\nnrow(d.papers.char)#number of papers\nsum(d.papers.char$humic.substance == 1)#how many papers employ at least 1 humic acid? but we are interested in the number of publications wmploying at\n#least one group-1 DOM:\nlength(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.type%in%group1.dom])))\n\n#not using at least 1 group-1 DOM:\nlength(unique(as.character(d.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"]))) - length(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.type%in%group1.dom])))\n\nsum(d.papers.char$IHSS ==1)#employing humic substance from the IHSS\nsum(d.papers.char$IHSS ==0 & d.papers.char$humic.substance == 1)#employing humic substance not from the IHSS (humic substance and not group1 DOM\n#in general)\nlength(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.type%in%group1.dom]))) - sum(d.papers.char$IHSS ==1) #not employing humic substances from the IHSS\nsum(d.papers.char$IHSS ==1 & d.papers.char$IHSS.standar.specified ==1)#report standard of the humic substance employed\nsum(d.papers.char$IHSS ==1 & d.papers.char$IHSS.standar.specified ==0)#don't report standard of the IHSS sample Cat. no\n\n\n#Summary of the experiment types:\nagg <- sum(sapply(d.papers.char$Experiment.type, function(x) grepl(x = x, pattern = \"^1$\")))#only aggregation\ndiss.precip <- sum(sapply(d.papers.char$Experiment.type, function(x) grepl(x = x, pattern = \"(2)|(5)\")))# dissolution and or precipitation\nadsrp <- sum(sapply(d.papers.char$Experiment.type, function(x) grepl(x = x, pattern = \"^4$\")))\nsome.diss <- sum(sapply(d.papers.char$Experiment.type, function(x) grepl(x = x, pattern = \"2\")))#dissoluton\nsome.agg <- sum(sapply(d.papers.char$Experiment.type, function(x) grepl(x = x, pattern = \"1\")))#some aggregation\n\n#Availability of chemical properties of group-1 DOM\nd.dom.avail <- read.csv(\"../newdata/dom_propr_avail.csv\", header = T)\nhead(d.dom.avail)\ncolnames(d.dom.avail)\nd.dom.avail <- d.dom.avail[, c(\"X\", \"IHSS.\", \"suva\", \"Mw\", \"elemental.comp\", \"X13C.NMR..full.spectra.\")]\n\n\n#remove empty rows\nd.dom.avail <- d.dom.avail[!d.dom.avail$X == \"\", ]\nd.dom.avail <- d.dom.avail[order(d.dom.avail$IHSS), ]\nd.dom.avail$X <- tolower(endofline.remover(d.dom.avail$X)) #replace NA with zeros)\n100*nrow(d.dom.avail[complete.cases(d.dom.avail),])/nrow(d.dom.avail)#how many complete cases are there? in percent\n100*sum(!is.na(d.dom.avail$Mw))/nrow(d.dom.avail)#how many MW is reported?\n100*sum(!is.na(d.dom.avail$suva))/nrow(d.dom.avail)#how many MW is reported?\n100*sum(!is.na(d.dom.avail$elemental.comp))/nrow(d.dom.avail)#how many MW is reported?\n100*sum(!is.na(d.dom.avail$X13C.NMR..full.spectra.))/nrow(d.dom.avail)#how many MW is reported?\n\n#sanity check:  are there names mismatches between the databases? besides unspecific fulvic and humic acids are not considered\nunique(tolower(d.data.nom.type$NOM.by.location)[d.data.nom.type$NOM.type%in%group1.dom][!tolower(d.data.nom.type$NOM.by.location[d.data.nom.type$NOM.type%in%group1.dom])%in%d.dom.avail$X])\nd.dom.avail$X[!d.dom.avail$X%in%tolower(d.data.nom.type$NOM.by.location[d.data.nom.type$NOM.type%in%group1.dom])]#one entry is not found\n\nd.dom.avail.nona <- data.frame(apply(d.dom.avail[, c(\"suva\", \"Mw\", \"elemental.comp\", \"X13C.NMR..full.spectra.\")], 2, na.zero)) #replace NA with zeros)\n#d.dom.avail.nona <- d.dom.avail.nona[, c(\"suva\", \"Mw\", \"elemental.comp\", \"X13C.NMR..full.spectra.\")]\nrownames(d.dom.avail.nona) <- rownames(d.dom.avail$X)\nd.dom.avail.nona$suva <- as.numeric(as.character(d.dom.avail.nona$suva))\nd.dom.avail.nona$elemental.comp <- as.numeric(as.character(d.dom.avail.nona$elemental.comp))\nd.dom.avail.nona$Mw <- as.numeric(as.character(d.dom.avail.nona$Mw))\nd.dom.avail.nona$X13C.NMR..full.spectra. <- as.numeric(as.character(d.dom.avail.nona$X13C.NMR..full.spectra.))\nstr(d.dom.avail)\n\n#number of papers that use DOM without one of the parameters:\n#number of papers with DOM in group 1:\nlength(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.type%in%group1.dom])))\n#no molecular weight\nlength(unique(as.character(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0])])))\n#no suva\nlength(unique(as.character(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$suva == 0])])))\n#no elemental composition\nlength(unique(as.character(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 0])])))\nlength(unique(as.character(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 0])])))\n#number of papers that use group1 DOM for which MW, elemental composition or nmr spectra are unknown:\nlength(unique(as.character(d.data.nom.type$Full.paper.title[\n  d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0 & \n  d.dom.avail.nona$elemental.comp == 0 & d.dom.avail.nona$X13C.NMR..full.spectra. == 0])])))\n#number of publications which use at least 1 grouo1-DOM for which all parameters are known:\nlength(unique(as.character(c(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 1])],\n  d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 1])],\n  d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 1])]))))\n\nlength(unique(as.character(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 1]) |\n               tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 1]) |\n                 tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 1])])))\n\n#number of publications which use at least 1 group1-DOM for which at least 1 value is unknown: (they can use multiple DOM for which the a value is known)\nlength(unique(as.character(c(d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0])],\n       d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 0])],\n       d.data.nom.type$Full.paper.title[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 0])]))))\n\nlength(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0]) &\nd.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$suva == 0])])))\nlength(unique(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$suva == 0])])))\n\n#number of experiments that use DOM with full categorization available:\nlength(as.character(d.data.nom.type$Full.paper.title[d.data.nom.type$NOM.type%in%group1.dom]))\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 1]), ])\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0]), ])\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$suva == 1]), ])\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$suva == 0]), ])\nnrow(d.data.nom.type[d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$Mw == 0 & d.dom.avail.nona$suva == 0]), ])\nnrow(d.data.nom.type[d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 1]), ])\nnrow(d.data.nom.type[d.data.nom.type$NOM.by.location%in%as.character(d.dom.avail$X[d.dom.avail.nona$elemental.comp == 0]), ])\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 1]), ])\nnrow(d.data.nom.type[tolower(d.data.nom.type$NOM.by.location)%in%as.character(d.dom.avail$X[d.dom.avail.nona$X13C.NMR..full.spectra. == 0]), ])\n\nheatmap.data.prop <- matrix(nrow = 1, ncol = 3)\nfor(i in 1:nrow(d.dom.avail.nona)){\n  heatmap.data.prop <- rbind(heatmap.data.prop, t(rbind(rep(as.character(d.dom.avail$X[i]), 4), names(d.dom.avail.nona[i,]) ,as.numeric(d.dom.avail.nona[i,]))))\n}\n\nheatmap.data.prop <- data.frame(heatmap.data.prop)\nheatmap.data.prop[, 3] <- heatmap.data.prop[, 3]\nheatmap.data.prop <- heatmap.data.prop[-1, ]\ncolnames(heatmap.data.prop) <- c(\"material\", \"test\", \"carried.on\")\n#heatmap.data.prop[, 1] <- as.character(1:nrow(heatmap.data.prop))\nis.IHSS <- sapply(as.character(unique(heatmap.data.prop[,1])), function(x) \n  if(d.dom.avail$IHSS.[d.dom.avail$X == x] == 1){return(\"seagreen3\")}else{return(\"black\")})\npdf(\"FigureProp.pdf\", width = 12, height = 7)\np <- (ggplot(heatmap.data.prop, aes(material, test)) + \n        geom_tile(aes(fill = carried.on), colour = \"white\") +\n        scale_fill_manual(drop=FALSE, values=colorRampPalette(c(\"white\",\"grey50\"))(2), na.value=\"#EEEEEE\", name=\"done?\") + \n        theme(axis.ticks = element_blank(), \n              axis.text.x = element_text(size = 6, angle = -90, hjust = 0),\n              legend.title = element_text(colour = \"grey30\"),\n              plot.margin = unit(c(0, 0, 0, 0), \"cm\"),\n              axis.title.x=element_blank(),\n              axis.title.y=element_blank()\n        ))\np\ndev.off()\n\n#is there correlation between papers that employ group-1 DOM that all it's dom are characterized in terms of Mw, and seperately in terms of SUVA?\n#for this we extract all papers that employ more than 1 group-1 DOM and see if the all materials in this papers are fully caracterized with either\n#of the properties: MW or SUVA or elemental composition or NMR spectra (for NMR spectra we expect that there will be many papers with full characterizatio\n#if they employ humic substances from the IHSS only).\nd.data.compat <- matrix(nrow = 1, ncol = 3)\nfor(i in unique(d.data.nom.type$DOI[!d.data.nom.type$DOI == \"\"])){\n  #go over all publications in the database,\n  used.dom <- d.data.nom.type[\n    d.data.nom.type$Full.paper.title == d.data.nom.type$Full.paper.title[d.data.nom.type$DOI == i], c(\"NOM.by.location\", \"NOM.type\")]#all the dom of this publications\n  used.dom.group1 <- tolower(unique(as.character(used.dom$NOM.by.location[used.dom$NOM.type%in%group1.dom])))#the used dom names of group1\n  used.dom.group1 <- used.dom.group1[!used.dom.group1%in%c(\"unfa\", \"unha\")]\n  dom.len <- length(used.dom.group1)#the number of froup-1 DOM used in this publication\n  if(dom.len > 1){#if there is more than 1 DOM from group 1 studied by this publication, the continue\n    info.array <- c()\n    if(sum(d.dom.avail.nona$Mw[d.dom.avail$X%in%used.dom.group1]) < dom.len & sum(d.dom.avail.nona$Mw[d.dom.avail$X%in%used.dom.group1]) > 0){#is there mixed information about their mw?\n      info.array <- c(info.array, 1)#mixed information\n    }\n    else if(sum(d.dom.avail.nona$Mw[d.dom.avail$X%in%used.dom.group1]) == dom.len){\n        info.array <- c(info.array, 2)\n    }else{\n      info.array <- c(info.array, 0)\n    }#conssistently missing information\n    if(sum(d.dom.avail.nona$suva[d.dom.avail$X%in%used.dom.group1]) < dom.len & sum(d.dom.avail.nona$suva[d.dom.avail$X%in%used.dom.group1]) > 0){#is there full information about their suva?\n      info.array <- c(info.array, 1)#mixed information\n    }\n    else if(sum(d.dom.avail.nona$suva[d.dom.avail$X%in%used.dom.group1]) == dom.len){#is there full information about their suva?\n      info.array <- c(info.array, 2)#conssitent and full information\n    }else{\n        info.array <- c(info.array, 0)#conssistently missing information\n    }\n    if(sum(d.dom.avail.nona$elemental.comp[d.dom.avail$X%in%used.dom.group1]) < dom.len & sum(d.dom.avail.nona$elemental.comp[d.dom.avail$X%in%used.dom.group1]) > 0){#is there full information about their suva?\n      info.array <- c(info.array, 1)\n    }\n    else if(sum(d.dom.avail.nona$elemental.comp[d.dom.avail$X%in%used.dom.group1]) == dom.len){#is there full information about their elemental comp?\n      info.array <- c(info.array, 2)#conssitent and full information\n    }else{\n      info.array <- c(info.array, 0)#conssistently missing information\n    }\n    if(sum(d.dom.avail.nona$X13C.NMR..full.spectra.[d.dom.avail$X%in%used.dom.group1]) < dom.len & sum(d.dom.avail.nona$X13C.NMR..full.spectra.[d.dom.avail$X%in%used.dom.group1]) >0){#is there full information about their suva?\n      info.array <- c(info.array, 1)\n    }\n    else if(sum(d.dom.avail.nona$X13C.NMR..full.spectra.[d.dom.avail$X%in%used.dom.group1]) == dom.len){#is there full information about their suva?\n      info.array <- c(info.array, 2)#conssitent and full information\n    }\n    else{#is there full information about their suva?\n      info.array <- c(info.array, 0)#conssistently missing information\n    }\n    d.data.compat <- rbind(d.data.compat, t(rbind(rep(as.character(i), 4), \n                      c(\"molecular weight\", \"SUVA\", \"elmental composition\", \"13C NMR\"), info.array)))\n    }\n}\n\nnrow(d.data.compat)/4\nd.data.compat <- data.frame(d.data.compat)\n#d.data.compat[, 3] <- d.data.compat[, 3]#conver column to numeric\nd.data.compat <- d.data.compat[-1, ]#remove first NA row\ncolnames(d.data.compat) <- c(\"publication\", \"test\", \"full.information\")\n#heatmap.data.prop[, 1] <- as.character(1:nrow(heatmap.data.prop))\npdf(\"FigureCompatibility.pdf\", width = 12, height = 7)\np <- (ggplot(d.data.compat, aes(publication, test)) + \n        geom_tile(aes(fill = full.information), colour = \"white\") +\n        scale_fill_manual(drop=FALSE, values= c(\"grey87\", \"grey50\", \"grey20\"), na.value=\"#EEEEEE\", name=\"DOM characteization\",\n                          labels = c(\"completely missing\", \"mixed\", \"full information\")) + \n        theme(axis.ticks = element_blank(), \n              axis.text.x = element_text(size = 6, angle = -90, hjust = 0),\n              legend.title = element_text(colour = \"grey30\"),\n              plot.margin = unit(c(0, 0, 0, 0), \"cm\"),\n              axis.title.x=element_blank(),\n              axis.title.y=element_blank()\n        ))\np\ndev.off()\n#summary:\nl <- length(d.data.compat$publication[d.data.compat$test == \"SUVA\"])#number of papers that employ at least two group-1 DOM types:\ntable(d.data.compat[d.data.compat$test == \"SUVA\", \"full.information\"])/l\ntable(d.data.compat[d.data.compat$test == \"molecular weight\", \"full.information\"])/l\ntable(d.data.compat[d.data.compat$test == \"elmental composition\", \"full.information\"])/l\ntable(d.data.compat[d.data.compat$test == \"13C NMR\", \"full.information\"])/l\nsum(aggregate(as.numeric(as.character(d.data.compat$full.information)), by = list(d.data.compat$publication), FUN = sum) == 8)/l #full information in all DOM parameters is 2*times number of tests\nsum(aggregate(as.numeric(as.character(d.data.compat$full.information)), by = list(d.data.compat$publication), FUN = sum) == 2)/l \n\n# Frequency and prevalence of materials in the experiments ----------------\n\n\n# abbreviation tables ----------------------------\n#the following creates the abbreviation tables for the PM and DOM specified in the database\n  # d.si.all <- read.csv(\"../newdata/newdata.csv\")#the table of the database for the supporting information\n  # #(contains lines that were removed from d.data.nom.type)\n  # save(d.si.all, file = \"siData.Rdata\")\n\n#creates an abbveriation table for the particulate matter employed in the experiments\nload(\"siData.Rdata\")#the read in data will be stored in d.di.all object (a dataframe)\nENP.abbreviations <- d.si.all[d.si.all$ENP.abbreviations != \"\", \"ENP.abbreviations\"]\nENP.abbreviations <- data.frame(colsplit(ENP.abbreviations,pattern = \"\\\\s\\\\|\\\\s\", names = c(\"abbreviation\", \"meaning\",\"ref\")))\nENP.abbreviations <- ENP.abbreviations[ ,c(\"abbreviation\", \"meaning\")]\nENP.abbreviations$meaning <- sapply(ENP.abbreviations$meaning,function(x) gsub(\"^\\\\s+|\\\\s+$\",\"\", x))#replace any leading or trailing spaces\nENP.abbreviations$abbreviation <- sapply(ENP.abbreviations$abbreviation,function(x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x))#replace any leading or trailing spaces\nENP.abbreviations <- ENP.abbreviations[order(ENP.abbreviations$abbreviation), ]\n#ENP.abbreviations$meaning <- sapply(ENP.abbreviations$meaning,function(x) gsub(pattern = \"\\\\|\\\\s\",replacement = \"\",x))\nENP.abbrev.table <- xtable(ENP.abbreviations, caption = \"Particulate matter abbreviations\", label = \"table:PM:abbreviation\", align = \"lll\", digits = rep(0, 3))\nprint(ENP.abbrev.table, include.rownames = FALSE, caption.placement = \"top\", tabular.environment = \"longtable\", sanitize.text.function = function(x) {x}, floating= FALSE)\n\n#creates an abbveriation table for the DOM employed in the experiments\nDOM.abbreviations <- d.si.all[d.si.all$NOM.type.abbreviations != \"\", \"NOM.type.abbreviations\"]\nDOM.abbreviations <- data.frame(colsplit(DOM.abbreviations,pattern = \"\\\\s\\\\|\\\\s\", names = c(\"abbreviation\", \"meaning\")))#split the line into abbreviation and the explanation\nDOM.abbreviations$meaning <- sapply(DOM.abbreviations$meaning,function(x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x))#replace any leading or trailing spaces\nDOM.abbreviations$abbreviation <- sapply(DOM.abbreviations$abbreviation,function(x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x))#replace any leading or trailing spaces\nDOM.abbreviations <- DOM.abbreviations[order(DOM.abbreviations$abbreviation), ]\nDOM.abbrev.table <- xtable(DOM.abbreviations, caption = \"Dissolved organic matter abbreviations\", label = \"table:DOM:abbreviation\", align = \"lll\", digits = rep(0, 3))\nprint(DOM.abbrev.table, include.rownames = FALSE, caption.placement = \"top\", tabular.environment = \"longtable\", sanitize.text.function = function(x) {x}, floating = FALSE)\n\n# DOM temporal evolution Figure S3 ---------------\npar(xpd = NA)\nm  <- rbind(c(0.1, 0.9, 0.8, 0.99),#for the DOM overall\n            c(0.1, 0.9, 0.4, 0.8),#for the NOM\n            c(0.1,0.9,0.07,0.39))#for the fresh water NOM\n#split.screen(m)\npdf(\"FigureS3.pdf\")\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0, 4), cex = 0.7)\nbarplot(dom.type3.freq, las = 2, col = as.character(dom.types3.freq.col), border = NA, xaxt = \"n\")\nlegend(\"topleft\", legend = rownames(dom.type3.freq), fill = as.character(dom.types3.freq.col),\n       border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.7, title = \"DOM\")\nmtext(text = \"a\", font = 2, side = 2, line = 2, las = 2, adj = 1, at = 120)#subfigure numbering for the start year network\nscreen(2)\npar(mar = rep(0, 4), cex = 0.7)\nbarplot(hs.type.freq, col = as.character(hs.type.freq.col), las = 2, border = NA, xaxt = \"n\")\nlegend(\"topleft\", legend = rownames(hs.type.freq), fill = as.character(hs.type.freq.col),\n       border = NA, bty = \"n\", x.intersp = 0.1, y.intersp = 0.8, cex = 0.9, title = \"humic substances/hydrophilic macromolecules\")\nmtext(\"number of experiments\", side = 2, line = 2.2, adj = 0.5, cex = 0.7)#y axis annotation\nmtext(text = \"b\", font = 2, side = 2, line = 2, las = 2, adj = 1, at  = 60)#subfigure numbering for the start year network\nscreen(3)\npar(mar = rep(0, 4), cex = 0.7)\nbarplot(fresh.water.hs.freq, las = 2, col = as.character(fresh.water.hs.freq.col), border = NA, ylab = \"number of experiments\", xlab = \"year\")\nlegend(\"topleft\", legend = rownames(fresh.water.hs.freq), fill = as.character(fresh.water.hs.freq.col), \n       bty = \"n\", x.intersp = 0.1, y.intersp = 0.7, border = NA, title = \"fresh water NOM / humic substances\", cex = 1)\nmtext(text = \"c\", font = 2, side = 2, line = 2, las = 2, adj = 1, at  = 50)#subfigure numbering for the start year network\nmtext(text = \"year\", side = 1, line = 2.1, adj = 0.5)#\nclose.screen(all.screens = TRUE)\ndev.off()\n# PM temporal evolution Figure S4 --------------------------\npar(xpd = NA)\nm  <- rbind(c(0.1, 0.9, 0.5, 0.9),#for the PM by core\n            c(0.1, 0.9, 0.1, 0.5))#for the specific PM\n#split.screen(m)\npdf(\"FigureS4.pdf\")\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0, 4), cex = 0.7)\nbarplot(pm.core.type.freq, col = pm.core.type.freq.col, xaxt = \"n\", border = NA)#here each material with unique coating is unique.\nlegend(\"topleft\", legend = rownames(pm.core.type.freq), x.intersp = 0.1, y.intersp = 0.7, fill = pm.core.type.freq.col,\n       bty = \"n\", title = \"PM chemcial compound type\", border = NA)\nmtext(text = \"a\", font = 2, side = 2, line = 2.9, las = 2, adj = 1, at = 120)\nmtext(text = \"Number of experiments\", side = 2, line = 2, adj = 0.5, at = 0)#\nscreen(2)\npar(mar = rep(0, 4), cex = 0.7)\nbarplot(pm.specif.freq, col = pm.specif.freq.col, las = 2, border = NA)\nlegend(\"topleft\", legend = max.names.specif.pm, x.intersp = 0.1, y.intersp = 0.7, fill = max.colors.spec.pm,\n       bty = \"n\", title = \"PM chemical compound\", border = NA)\nmtext(text = \"b\", font = 2, side = 2, line = 2.9, las = 2, adj = 1, at = 120)#\nmtext(text = \"Year\", side = 1, line = 2.1, adj = 0.5)#\nclose.screen(all.screens = TRUE)\ndev.off()\n# Systematic trends in experimental designs - isolated DOM vs. water samples --------\n#water.sample  <- c(\"lake water\", \"lotic mesocosm water\", \"sea water\", \"lagoon water\", \"ground water\", \"river water\", \"STP effluent\", \"seawater mesocosm\",\n #                  \"storm water\", \"fresh water mesocosm\", \"surface water\", \"wetland water\", \"drinking water\", \"industrial wastewater\", \"STP influent\",\n  #                 \"pond water\", \"small stream water\", \"swamp water\")\nwater.sample <- as.character(unique(d.data.nom.type$NOM.type.extended[d.data.nom.type$NOM.type%in%water.samples]))\n#PM is grey and the DOM is colored based on water sample vs. not water sample...\nV(g.data.nom.type)$DOM.water  <- \"\"\nV(g.data.nom.type)$DOM.water[V(g.data.nom.type)$name %in% water.sample]  <- \"#81DAF5\" \nV(g.data.nom.type)$DOM.water[!V(g.data.nom.type)$name %in% water.sample & V(g.data.nom.type)$type == FALSE]  <- \"#BE81F7\"\nV(g.data.nom.type)$DOM.water[V(g.data.nom.type)$type] <-  \"#58585830\"\n#number of water samples:\nsum(V(g.data.nom.type)$DOM.water == \"#81DAF5\")\n#number of isolated DOM\nsum(V(g.data.nom.type)$DOM.water == \"#BE81F7\")\n#V(g.data.nom.type)$pm.label  <- \"\"\n#V(g.data.nom.type)$pm.label[V(g.data.nom.type)$type]  <- V(g.data.nom.type)$name[V(g.data.nom.type)$type]\n#V(g.data.nom.type)$label.cex  <- 0.4\n\nlink.water  <- sapply(edge.list[,2], function(x) {if(x%in%water.sample){return(TRUE)}else{return(FALSE)}})#find the links that have water sample for DOM\n\n#statistics regarding the differences in link weights and degree of isolated DOM vs. water samples:\ndom.isol.weight.stat <- wilcox.test(E(g.data.nom.type)$weight[link.water],E(g.data.nom.type)$weight[!link.water],paired = FALSE,alternative = \"greater\")#no significant difference between the number of times a given water sample was studied vs. isolated DOM.\n#what about the number of combinations of PM?\ndegree.waterdom <- degree(g.data.nom.type)[V(g.data.nom.type)$name %in% water.sample]#degree of isolated DOM nodes only degree.waterdom\ndegree.isoldom <- degree(g.data.nom.type)[!V(g.data.nom.type)$name %in% water.sample & V(g.data.nom.type)$type == FALSE]#degree of DOM water sample nodes only\ndom.isol.degree.stat <- wilcox.test(degree.waterdom,degree.isoldom,paired = FALSE,alternative = \"greater\")#there is a significant difference betweent he diversity of PM used for water samples vs. this used for isolated DOM\n\n#what is the overlap between PM tested with isolated DOM and water sample?\n#extract the a list of 1 and 0 for all  PM that was studied with water sample:\n#if the edge list of the water sample contains a given PM it will be given 0.5 else it'll be given 0: same for isolated DOM (here the PM is sorted based on its type, given by the column ENP.type)\npm.list.sorted.type  <- unique(d.data.nom.type$ENP[order(d.data.nom.type$ENP.type)])\npm.span.water.sample  <- sapply(pm.list.sorted.type, function(x) {if(x%in%edge.list[link.water,1]){return(0.5)}else{return(0)}})\nsum(pm.span.water.sample == 0.5)#number of PM tested with water samples\npm.span.isolated.dom  <- sapply(pm.list.sorted.type, function(x) {if(x%in%edge.list[!link.water,1]){return(0.7)}else{return(0)}})\nsum(pm.span.isolated.dom == 0.7)#number of PM tested with isolated DOM, of course there are some that were tested with both therefore the number up to more than the ttoal number of PM nodes\n\n#the dimensions for the regtangles of the isolated DOM (for figure 4)\npm.isolated.dom  <- which(pm.span.isolated.dom == 0.7)#the PM that were tested with isolated DOM\nxright.isolated <-pm.isolated.dom[unlist(sapply(1:(length(pm.isolated.dom) - 1),\n                                                function(x) {if(pm.isolated.dom[x + 1] == pm.isolated.dom[x] + 1){if(x == length(pm.isolated.dom) - 1){return(c(FALSE,TRUE))}else{\n                                                  return(FALSE)}}else{if(x == length(pm.isolated.dom) - 1){return(c(TRUE,TRUE))}else{return(TRUE)}}}))]#checks that the last index if of the one before last entry, if so, always\n#set this entry to a right side boundry. If it will also be a left side boundry then this is an isolated entry that was tested\nxleft.isolated <-pm.isolated.dom[unlist(sapply(2:length(pm.isolated.dom),\n                                               function(x) {if(pm.isolated.dom[x] == pm.isolated.dom[x - 1] + 1){if(x == 2){return(c(TRUE,FALSE))}else{\n                                                 return(FALSE)}}else{if(x == 2){return(c(TRUE,TRUE))}else{return(TRUE)}}}))]#Always define the first index as the left boundry.\n\n#the dimensions for the regtangles of the water sample DOM (for figure 4):\npm.water.dom  <- which(pm.span.water.sample == 0.5)#the PM that was studied with water samples\nxright.water <- pm.water.dom[unlist(sapply(1:(length(pm.water.dom) - 1), function(x) {if(pm.water.dom[x + 1] == pm.water.dom[x] + 1){\n  if(x == length(pm.water.dom) - 1){return(c(FALSE,TRUE))}else{\n    return(FALSE)}}else{if(x == length(pm.water.dom) - 1){return(c(TRUE,TRUE))}else{return(TRUE)}}}))]#checks that the last index if of the one before last entry, if so, always\n#set this entry to a right side boundry. If it will also be a left side boundry then this is an isolated entry that was tested\nxleft.water <- pm.water.dom[unlist(sapply(2:length(pm.water.dom), function(x) {if(pm.water.dom[x] == pm.water.dom[x - 1] + 1){\n  if(x == 2){return(c(TRUE,FALSE))}else{\n    return(FALSE)}}else{if(x == 2){return(c(TRUE,TRUE))}else{return(TRUE)}}}))]#Always define the first index as the left boundry.\n\n# DOM isolated and water samples - Figure S5 -------------------------------\n#The following figure compares the empirical and the subset networks:\npar(xpd = NA)\nm  <- rbind(c(0.1, 0.9, 0.4, 0.9),#for the network\n            c(0.4, 0.6, 0.25, 0.4),#for the degree barplot\n            c(0.05, 0.95, 0.15, 0.25))#for the material overlap\n\n#split.screen(m)\npdf(\"FigureS5.pdf\", width = 11, height = 7)\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0., 4))\nplot(g.data.nom.type, vertex.frame.color = NA, vertex.size = sqrt(degree(g.data.nom.type))+3, vertex.label = \"\", vertex.shape = V(g.data.nom.type)$shape, edge.width = E(g.data.nom.type)$width/4,vertex.color = V(g.data.nom.type)$DOM.water)\nlegend(\"topleft\", legend = c(\"water sample\", \"isolated DOM\", \"PM\"), col = c(\"#81DAF5\", \"#BE81F7\", \"grey\"), pch = c(15, 15, 16), cex = 0.7, bty = \"n\", border = \"white\", pt.cex = 2, y.intersp = 1.5)# is the vertical space between lines in the legend\nmtext(\"a\", side = 3, line = -0.5, adj = 0.01, cex = 1, font = 2)#subfigure numbering\n\nscreen(2)\npar(mar = rep(0.5, 4), cex = 0.7)\nboxplot(degree.isoldom,degree.waterdom, col =c(\"#BE81F7\", \"#81DAF5\"), las = 1, log = \"y\", names = c(\"Isolated DOM\", \"Water sample\"), boxwex = 0.2)\nlegend(\"topright\", paste(\"p value = \", as.character(signif(digits = 3, dom.isol.degree.stat$p.value)), sep = \" \"), bg=\"white\", cex = 0.8)\nmtext(\"Number of PM types\", side = 2, line = 2.2, adj = 0.5, cex = 0.7)#y axis annotation\nmtext(\"b\", side = 3, line = -1.1, adj = -1.1, cex = 1, font = 2)#subfigure numbering\n\nscreen(3)\npar(mar = rep(0, 4), cex = 0.45)\nplot(pm.span.isolated.dom, ylim = c(0.1, 1.5), ann = FALSE, xaxt = \"n\", yaxt = \"n\", bty = \"n\", col = \"#BE81F7\", pch = \"\")\nrect(xleft = xleft.isolated-0.5, ybottom = rep(0.7-0.03, length(xleft.isolated)), xright = xright.isolated+0.5, ytop = rep(0.7+0.03, length(xright.isolated)), col = \"#BE81F7\", border = NA)\n\nrect(xleft = xleft.water-0.5, ybottom = rep(0.5-0.03, length(xleft.water)), xright = xright.water+0.5, ytop = rep(0.5+0.03, length(xright.water)), col = \"#81DAF5\", border = NA)\nlabel.pm  <- as.character(pm.list.sorted.type)\n#label.pm[seq(1, length(pm.list.sorted.type), by = 2)]  <- \"\"\nlabel.pm <- sapply(label.pm,function(x) gsub(\"-|_\", replacement = \"\", x = x))\naxis(1, at = 1:length(label.pm), labels = label.pm, line = -1.5, tick = FALSE, las = 2, col = \"grey\", cex.axis = 1.4, font = 1)#x axis ticks\nmtext(\"c\", side = 3, line = -2, adj = 0.01, cex = 1, font = 2)#subfigure numbering\ndev.off()\nclose.screen(all.screens = TRUE)\n\n\n# heatmap materials distribution Figure S2 --------------------------------------\n#The following code generates the heatmap description of the network, it needs the code for the coating analysis and the water sample analysis\n\nheatmap.matrix  <- sapply(unique(as.character(d.data.nom.type$ENP)), function(x) {sapply(unique(as.character(d.data.nom.type[ ,nom.data.column])),\n                                 function(y) {link = paste(x, y, sep =\"--\"); if(are.connected(g.data.nom.type, x, y)){\n                                 return(E(g.data.nom.type)$weight[get.edge.ids(g.data.nom.type, c(x, y))])}else{return(0)}})})#returns a matrix of |PM|x|DOM| dimension\n\n#heatmap.matrix <- heatmap.matrix[order(apply(heatmap.matrix,2,sum)),]#sort according to link weights\n\nheatmap.matrix.melt  <- melt(heatmap.matrix)\ncolnames(heatmap.matrix.melt) <- c(\"DOM\", \"PM\", \"n.experiments\")\nheatmap.matrix.melt$DOM  <- factor(heatmap.matrix.melt$DOM, levels = unique(heatmap.matrix.melt$DOM))#the levels must be perserved in order\n#for the coloring scheme below to work\nheatmap.matrix.melt$PM  <- factor(heatmap.matrix.melt$PM, levels = unique(heatmap.matrix.melt$PM))\n#Color DOM based on water sampled or isolated DOM:\npm.color.heatmap  <- sapply(unique(heatmap.matrix.melt$PM), function(x) V(g.data.nom.type)$coating.color[x == V(g.data.nom.type)$name])\n#Color PM based on coated or not coated PM:\ndom.color.heatmap  <- sapply(unique(heatmap.matrix.melt$DOM), function(x) V(g.data.nom.type)$DOM.water[x == V(g.data.nom.type)$name])\n#levels(heatmap.matrix.melt$DOM)[levels(heatmap.matrix.melt$DOM) == \"surface water NOM\"]  <- \"surface water DOM\"\npdf(\"FigureS2.pdf\", width = 10, height = 10)\n(p <- ggplot(heatmap.matrix.melt, aes(PM, DOM)) + \n  geom_tile(aes(fill = n.experiments), colour = \"white\") + \n  #scale_x_discrete(expand = c(0.2,0))+\n  scale_fill_gradient(low = \"white\", high = \"black\", name  = \"#experiments\", breaks=c(0, 7, max(E(g.data.nom.type)$weight))) + \n  scale_x_discrete(expand = c(0, -1)) +\n  theme(axis.ticks = element_blank(), \n        axis.text.x = element_text(size = 4.1, angle = -90, hjust = 0, colour = pm.color.heatmap),\n        axis.text.y = element_text(size = 4.1, colour = dom.color.heatmap),\n        legend.title = element_text(colour = \"grey30\"),\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\")\n  ))\ndev.off()\n\n# Supporting information - NOM source and its chemical composition --------\n# NOM distribution in PC space Figure S6 --------------------------------------\n#Distribution of labled humic substances in the first two priciple components space:\n\nggplot(d.pca.summary) +\n  geom_vline(xintercept = 0, size = 0.1) +\n  geom_hline(yintercept = 0, size = 0.1) +\n  geom_point(aes(PC1, PC2, color = type), size = 3)+#, color = 'grey') +\n  geom_label_repel(force = 10,\n    aes(PC1, PC2, fill = type, label = source),\n    fontface = 'bold', color = 'white',\n    label.size = 1.5,\n    size = 2,\n    box.padding = unit(0.25, \"lines\"),\n    point.padding = unit(0.5, \"lines\")\n  ) +\n  scale_fill_discrete(guide = guide_legend(ncol =  1, title = \"NOM source\")) +\n  scale_color_discrete(guide = F) +#omit the redundant point legend\n  #geom_text(aes(d.pca.summary[, 1], d.pca.summary[, 2], label = \"\"), show.legend  = F) +\n  theme_classic(base_size = 7) +\n  theme(axis.line.x = element_line(color=\"black\", size = 0.1),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14),\n        legend.title = element_text(size = 14),\n        legend.text = element_text(size = 8),\n        axis.line.y = element_line(color=\"black\", size = 0.1))\nggsave(\"FigureS6.pdf\", width = 15, height = 7.5)\n\n#PCA with highlighted regions - Figure S7 --------------------------------\n#regions for annotations:\n#podzol:\npodzol.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"podzol\", x = d.pca.summary$type[x])){\n                return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\npodzol.region.x <- range(podzol.region[names(podzol.region) == \"PC1\"]) + c(-0.05, 0.05)\npodzol.region.y <- range(podzol.region[names(podzol.region) == \"PC2\"]) + c(-0.05, 0.05)\n#peat humic acid:\npeat.ha.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"^peat humic\", x = d.pca.summary$type[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\npeat.ha.region.x <- range(peat.ha.region[names(peat.ha.region) == \"PC1\"]) + c(-0.05, 0.05)\npeat.ha.region.y <- range(peat.ha.region[names(peat.ha.region) == \"PC2\"]) + c(-0.05, 0.05)\n#river fulvic acid:\nriver.fa.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"^river fulvic\", x = d.pca.summary$type[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nriver.fa.region.x <- range(river.fa.region[names(river.fa.region) == \"PC1\"]) + c(-0.05, 0.05)\nriver.fa.region.y <- range(river.fa.region[names(river.fa.region) == \"PC2\"]) + c(-0.05, 0.05)\n#river humic acid region:\nriver.ha.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"^river humic\", x = d.pca.summary$type[x]) &\n                                                                       !grepl(pattern = \"^ogeechee\", x = d.pca.summary$source[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nriver.ha.region.x <- range(river.ha.region[names(river.ha.region) == \"PC1\"]) + c(-0.05, 0.05)\nriver.ha.region.y <- range(river.ha.region[names(river.ha.region) == \"PC2\"]) + c(-0.05, 0.05)\n#marine:\nmarine.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"^ocean\", x = d.pca.summary$type[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nmarine.region.x <- range(marine.region[names(marine.region) == \"PC1\"]) + c(-0.05, 0.05)\nmarine.region.y <- range(marine.region[names(marine.region) == \"PC2\"]) + c(-0.05, 0.05)\n#estuarine sediment:\nestuarine.sediment.region <- unlist(sapply(1:nrow(d.pca.summary), \n                             function(x) if(grepl(pattern = \"^estuarine sediment\", x = d.pca.summary$type[x])\n                                            & !grepl(pattern = \"chesapeake\", x = d.pca.summary$source[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nestuarine.sediment.region.x <- range(estuarine.sediment.region[names(estuarine.sediment.region) == \"PC1\"]) + c(-0.05, 0.05)\nestuarine.sediment.region.y <- range(estuarine.sediment.region[names(estuarine.sediment.region) == \"PC2\"]) + c(-0.05, 0.05)\n#soil humic acid1:\nsoil.1.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if((grepl(pattern = \"^soil humic\", x = d.pca.summary$type[x])) &\n                                                                   !(grepl(pattern = \"(summit)|(melbourne)\", x = d.pca.summary$source[x]))){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nsoil.1.region.x <- range(soil.1.region[names(soil.1.region) == \"PC1\"]) + c(-0.05, 0.05)\nsoil.1.region.y <- range(soil.1.region[names(soil.1.region) == \"PC2\"]) + c(-0.05, 0.05)\n\n#soil fulvic acid fraction:\nsoil.faf.region <- unlist(sapply(1:nrow(d.pca.summary), function(x) if(grepl(pattern = \"^soil fulvic acid fraction\", x = d.pca.summary$type[x])){\n  return(unlist(d.pca.summary[x, c(\"PC1\", \"PC2\")]))}else{return(NA)}))\nsoil.faf.region.x <- range(soil.faf.region[names(soil.faf.region) == \"PC1\"]) + c(-0.05, 0.05)\nsoil.faf.region.y <- range(soil.faf.region[names(soil.faf.region) == \"PC2\"]) + c(-0.05, 0.05)\n\nggplot(d.pca.summary) +\n  geom_vline(xintercept = 0, size = 0.1) +\n  geom_hline(yintercept = 0, size = 0.1) +\n  geom_point(aes(PC1, PC2, color = type), size = 3)+#, color = 'grey') +\n  scale_fill_discrete(guide = guide_legend(ncol =  1, title = \"NOM source\")) +\n  scale_color_discrete(guide = F) +#omit the redundant point legend\n  #geom_text(aes(d.pca.summary[, 1], d.pca.summary[, 2], label = \"\"), show.legend  = F) +\n  theme_classic(base_size = 7) +\n  theme(axis.line.x = element_line(color=\"black\", size = 0.1),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14),\n        legend.title = element_text(size = 14),\n        legend.text = element_text(size = 8),\n        axis.line.y = element_line(color=\"black\", size = 0.1)) +\n  annotate(\"rect\", xmin = river.fa.region.x[1] , xmax = river.fa.region.x[2], ymin = river.fa.region.y[1], ymax = river.fa.region.y[2],\n           alpha = .2, fill = \"skyblue\") + \n  annotate(\"text\", x = mean(river.fa.region.x) , y = river.fa.region.y[2] + 0.05, label = \"1. river fulvic acids\", fontface = 2) +\n  annotate(\"rect\", xmin = soil.faf.region.x[1] , xmax = soil.faf.region.x[2], ymin = soil.faf.region.y[1], ymax = soil.faf.region.y[2],\n           alpha = .2, fill = \"hotpink\") + \n  annotate(\"text\", x = mean(soil.faf.region.x) +0.5 , y = soil.faf.region.y[2] + 0.05, label = \"2. soil fulvic acids fractions\", fontface = 2) +\n  annotate(\"rect\", xmin = river.ha.region.x[1] , xmax = river.ha.region.x[2], ymin = river.ha.region.y[1], ymax = river.ha.region.y[2],\n           alpha = .2, fill = \"darkorchid1\") + \n  annotate(\"text\", x = mean(river.ha.region.x) , y = river.ha.region.y[2] + 0.05, label = \"3. river humic acids\", fontface = 2) +\n  annotate(\"rect\", xmin = marine.region.x[1] , xmax = marine.region.x[2], ymin = marine.region.y[1], ymax = marine.region.y[2],\n           alpha = .2, fill = \"seagreen3\") + \n  annotate(\"text\", x = mean(marine.region.x) , y = marine.region.y[2] + 0.05, label = \"4. marine DOM\", fontface = 2) +\n  annotate(\"rect\", xmin = estuarine.sediment.region.x[1] , xmax = estuarine.sediment.region.x[2], ymin = estuarine.sediment.region.y[1], ymax = estuarine.sediment.region.y[2],\n           alpha = .2, fill = \"darkgoldenrod1\") + \n  annotate(\"text\", x = mean(estuarine.sediment.region.x), y = estuarine.sediment.region.y[2] + 0.05, label = \"5. estuarine sediment humic acids\", fontface = 2) +\n  annotate(\"rect\", xmin = podzol.region.x[1] , xmax = podzol.region.x[2], ymin = podzol.region.y[1], ymax = podzol.region.y[2],\n           alpha = .1, fill = \"cyan3\") + \n  # geom_segment(aes(x = d.pca.summary$PC1[d.pca.summary$source == \"chesapeake bay sediment humic acid\"]+0.01, \n  #                  y = d.pca.summary$PC2[d.pca.summary$source == \"chesapeake bay sediment humic acid\"]+0.01, \n  #                  xend = d.pca.summary$PC1[d.pca.summary$source == \"kings bay sediment humic acid2\"], \n  #                  yend = d.pca.summary$PC2[d.pca.summary$source == \"kings bay sediment humic acid2\"]),\n  #              arrow = arrow(length = unit(0.1, \"cm\"))) + \n  annotate(\"text\", x = podzol.region.x[1] , y = mean(podzol.region.y), label = \"6. podzol soil humic acids\", fontface = 2, angle = 90) +\n  annotate(\"rect\", xmin = peat.ha.region.x[1] , xmax = peat.ha.region.x[2], ymin = peat.ha.region.y[1], ymax = peat.ha.region.y[2],\n           alpha = .2, fill = \"seagreen3\") + \n  annotate(\"text\", x = mean(peat.ha.region.x) , y = peat.ha.region.y[2] + 0.05, label = \"7. peat humic acids\", fontface = 2) +\n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"suwannee river fulvic acid (IHSS 1S101F)\"] + 0.05, #annotation of the SRFA humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"suwannee river fulvic acid (IHSS 1S101F)\"]+ 0.05, label = \"A1\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"suwannee river fulvic acid (IHSS 2S101F)\"] + 0.05, #annotation of the SRFA humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"suwannee river fulvic acid (IHSS 2S101F)\"]+ 0.05, label = \"A2\", fontface = 2) +\n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"suwannee river humic acid (IHSS 1S101H)\"] + 0.05, #annotation of the SRHA humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"suwannee river humic acid (IHSS 1S101H)\"]+ 0.05, label = \"B1\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"suwannee river humic acid (IHSS 2S101H)\"] + 0.05, #annotation of the SRHA humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"suwannee river humic acid (IHSS 2S101H)\"]+ 0.05, label = \"B2\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"ogeechee river humic acid\"] + 0.05, #annotation of the Ogeechee humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"ogeechee river humic acid\"]+ 0.05, label = \"C\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"sigma aldrich humic acid\"] + 0.05, #annotation of the aldrich humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"sigma aldrich humic acid\"]+ 0.05, label = \"D\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"elliot soil humic acid (IHSS 1S102H)\"] + 0.05,#annotate the elliot soil humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"elliot soil humic acid (IHSS 1S102H)\"]+ 0.05, label = \"E1\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"elliot soil humic acid (IHSS 4S102H)\"] + 0.05, #annotate the elliot soil humic acid\n           y = d.pca.summary$PC2[d.pca.summary$source == \"elliot soil humic acid (IHSS 4S102H)\"]+ 0.05, label = \"E2\", fontface = 2) + \n  annotate(\"text\", x = d.pca.summary$PC1[d.pca.summary$source == \"chesapeake bay sediment humic acid\"] + 0.05, #annotate the chesapeake sediement HA outlier\n           y = d.pca.summary$PC2[d.pca.summary$source == \"chesapeake bay sediment humic acid\"]+ 0.05, label = \"F\", fontface = 2) +\nggsave(\"FigureS7.pdf\", width = 10, height = 7.5)\n\n# Euclidean distances in PC space Figure S8 ------------------------------------\n#The following script analyzes the differences in distances of the materials inthe 2D space, spanned by the first PCs.\n\n#First the distance of materials from similar environment is compared to distances of materials from different environments:\ninter.type.dist <- c()\nintra.type.dist <- c()\ndist.matrix <- data.frame(as.matrix(dist(d.pca.summary[ ,1:2], upper = T, diag = T)))\nfor(i in 1:(nrow(dist.matrix)-1)){\n  current.type <- as.character(d.pca.summary$type[i])\n  for(j in (i+1):nrow(dist.matrix)){#going over only the upper half of the matrix without the diagonal\n    if(as.character(d.pca.summary$type[j]) == current.type){\n      intra.type.dist <- c(intra.type.dist, dist.matrix[i, j])\n    }else{inter.type.dist <- c(inter.type.dist, dist.matrix[i, j])}\n  }\n}\n\n#same analysis without soil humic acid:\n# inter.type.dist.no.soil <- c()\n# intra.type.dist.no.soil <- c()\n# d.pca.summary.no.soil <- d.pca.summary[!d.pca.summary$type %in% c(\"soil humic acid\"), ]\n# dist.matrix.no.soil <- data.frame(as.matrix(dist(d.pca.summary.no.soil[, 1:2], upper = T, diag = T)))\n# \n# for(i in 1:(nrow(dist.matrix.no.soil)-1)){\n#   current.type <- as.character(d.pca.summary.no.soil$type[i])\n#   for(j in (i+1):nrow(dist.matrix.no.soil)){#going over only the upper half of the matrix without the diagonal\n#     if(as.character(d.pca.summary.no.soil$type[j]) == current.type){\n#       intra.type.dist.no.soil <- c(intra.type.dist.no.soil, dist.matrix.no.soil[i, j])\n#     }else{inter.type.dist.no.soil <- c(inter.type.dist.no.soil, dist.matrix.no.soil[i, j])}\n#   }\n# }\n#second the same analysis is done only by shuffeling the lables of the materials to observe if the different distributions of distances\n#is significant or not (y randomization)\ninter.type.dist.yrand <- c()\nintra.type.dist.yrand <- c()\nd.pca.summary.yran <- d.pca.summary\nfor(y in 1:100){\n  d.pca.summary.yran$type <- d.pca.summary.yran$type[sample(1:nrow(d.pca.summary.yran), replace = F)]#randomize the labels of the humic substances\n  for(i in 1:(nrow(dist.matrix)-1)){#distances should not be recalculates only the seperation of same label vs. different label\n    current.type <- as.character(d.pca.summary.yran$type[i])\n    for(j in (i+1):nrow(dist.matrix)){#going over only the upper half of the matrix without the diagonal\n      if(as.character(d.pca.summary.yran$type[j]) == current.type){\n        intra.type.dist.yrand <- c(intra.type.dist.yrand, dist.matrix[i, j])\n      }else{inter.type.dist.yrand <- c(inter.type.dist.yrand, dist.matrix[i, j])}\n    }\n  }\n}\n\npar(xpd = NA)\n# m  <- rbind(c(0.0, 0.45, 0.1, 0.9),#original differences in distances\n#             c(0.55, 1, 0.1, 0.9))#distances in ''y-randomized'' dataset\n\n#m  <- rbind(c(0.0, 0.35, 0.3, 0.8),#original differences in distances\n #           c(0.31, 0.65, 0.3, 0.8),#distances without soil\n  #          c(0.61, 0.95, 0.3, 0.8))#distances in ''y-randomized'' dataset\n\npdf(\"FigureS8.pdf\")\nsplit.screen(m)\nscreen(1)\nhist(inter.type.dist, xlim = range(c(intra.type.dist, inter.type.dist)), \n     freq = F, ylim = c(0, 1), col = \"#F39C1250\", border = \"grey\", xlab = \"euclidean distance\", main = \"\", ylab =\"\")\nhist(intra.type.dist, add = T, xlim = range(c(intra.type.dist, inter.type.dist)), freq = F, col = \"#45993C70\", border = \"grey\")\ntext(x = 0.1, y = 1., label = \"a\", font = 2)\n#screen(2)\n#hist(inter.type.dist.no.soil, xlim = range(c(intra.type.dist.no.soil, inter.type.dist.no.soil)), \n #    freq = F, ylim = c(0, 1), col = \"#F39C1250\", border = \"grey\", xlab = \"euclidean distance\", main = \"\", ylab = \"\")\n#hist(intra.type.dist.no.soil, add = T, xlim = range(c(intra.type.dist.no.soil, inter.type.dist.no.soil)), freq = F, col = \"#45993C70\", border = \"grey\")\n#text(x = 0.1, y = 1., label = \"b\", font = 2)\nscreen(2)\nhist(inter.type.dist.yrand, xlim = range(c(intra.type.dist.yrand, inter.type.dist.yrand)), \n     freq = F, ylim = c(0, 1), col = \"#F39C1250\", border = \"grey\", xlab = \"euclidean distance\", main = \"\")\nhist(intra.type.dist.yrand, add = T, xlim = range(c(intra.type.dist.yrand, inter.type.dist.yrand)), freq = F, col = \"#45993C70\", border = \"grey\")\ntext(x = 0.1, y = 1., label = \"b\", font = 2)\nlegend(\"topright\", legend = c(\"different environments\", \"similar environments\"), fill  = c(\"#F39C1250\", \"#45993C70\"), cex = 0.5, border = \"grey\", bty = \"n\")\nclose.screen(all.screens = T)\ndev.off()\n\n\n# Supporting information - Comparison to a random network -----------------\n\n#number of random network realizations to create:\nn.random <- 1000\n#Simple graph measures, in order to compare the structural features only we need to remove the weights of the edges such that the graph is binary,\n#since the random graph is binary\ng.data.nom.type.binary  <- adj.to.graph(d.data.nom.type[c(\"ENP\", nom.data.column)], d.data.nom.type$ENP)\nE(g.data.nom.type.binary)$weight  <- 1\nE(g.data.nom.type.binary)$width  <- 1\n#diameter(g.data.nom.type.binary)\nn.nodes <- vcount(g.data.nom.type.binary)\nn.links  <- ecount(g.data.nom.type.binary)\np.degree <- ecount(g.data.nom.type.binary)/(sum(V(g.data.nom.type.binary)$type) * sum(V(g.data.nom.type.binary)$type == FALSE))#the probability of linking in a G(n,p) model that corresponds to \n#the empirical network. is adjusted to a bipartite network, since the average number of linksin for the nom is |ENP|*p which is also ecount(nom)/|nom| which is \n#p = ecount(nom)/(|nom|*|enp|) => ecount(network)/(|NOM|*|ENP|)\ng.mean.degree <- 2*ecount(g.data.nom.type.binary)/vcount(g.data.nom.type.binary)#mean degree:\ng.assor  <- assortativity_degree(g.data.nom.type.binary,directed = FALSE)\n#is the graph sparse?\ng.rho <- ecount(g.data.nom.type.binary)/(sum(V(g.data.nom.type.binary)$type) * sum(V(g.data.nom.type.binary)$type == FALSE))\ng.diameter <- diameter(g.data.nom.type.binary)\ng.path <- average.path.length(g.data.nom.type.binary)\n#\nrandom.values <- sapply(1:n.random,function(x) {\n  set.seed(x)#set seed number for reproducibility\n  g.data.nom.type.rand <- bipartite.random.game(sum(V(g.data.nom.type)$type == TRUE), sum(V(g.data.nom.type)$type != TRUE), type  = \"gnp\", p = p.degree)\n  n.nodes <- vcount(g.data.nom.type.rand)\n  n.links <- ecount(g.data.nom.type.rand)\n  dim  <-  diameter(g.data.nom.type.rand)\n  av.path  <-  average.path.length(g.data.nom.type.rand)\n  deg.assor  <-  assortativity_degree(g.data.nom.type.rand)\n  dens  <- n.links/(sum(V(g.data.nom.type.rand)$type)*sum(V(g.data.nom.type.rand)$type == FALSE))\n  mean.degree <- 2*n.links/n.nodes\n  return(data.frame(dim,av.path, deg.assor, dens, mean.degree, n.nodes, n.links))})\nrandom.values  <- data.frame(t(apply(random.values, 2, unlist)))\n#Calculate the empirical quantiles of each parameter (95\\% two sides confidence interval will be the range of values between the 2.5% and 97.5% empirical quantiles)\nrandom.values.95  <- data.frame(sapply(1:ncol(random.values), function(x) return(list(quantile(random.values[ ,x], probs = 0.025),\n                     quantile(random.values[ ,x], probs = 0.975)))))\ncolnames(random.values.95)  <- names(random.values)#give meaningful names to each column\n\n#if the observed parameter is strictly less than 2.5% quantile of strictly more than the 97.5% quantile the value is outside of the 95% confidence interval -> significant\nif(g.diameter < as.numeric(random.values.95$dim[1]) || g.diameter > as.numeric(random.values.95$dim[2])){diam.sig <- \"*\"}else{diam.sig<- as.character()}\nif(g.path < as.numeric(random.values.95$av.path[1]) || g.path > as.numeric(random.values.95$av.path[2])){path.sig <- \"*\"}else{path.sig<- as.character()}\nif(g.rho < as.numeric(random.values.95$dens[1]) || g.rho > as.numeric(random.values.95$dens[2])){dens.sig <- \"*\"}else{dens.sig<- as.character()}\nif(g.assor < as.numeric(random.values.95$deg.assor[1]) || g.assor > as.numeric(random.values.95$deg.assor[2])){assor.sig <- \"*\"}else{assor.sig <- as.character()}\nif(g.mean.degree < as.numeric(random.values.95$mean.degree[1]) || g.mean.degree > as.numeric(random.values.95$mean.degree[2])){mean.deg.sig <- \"*\"}else{mean.deg.sig <- as.character()}\n\n#Ensemble the summery table for the properties:\nprop.summary.table <- data.frame(\"Parameter\" = c(\"mean degree\",\"diameter\",\"average shortest path\",\"density\",\"degree assortativity\"),\n                      \"Empirical network\" = c(paste(signif(g.mean.degree,digits = 2),mean.deg.sig),paste(signif(g.diameter,digits = 2),diam.sig),paste(signif(g.path,digits = 2),path.sig),paste(signif(g.rho,digits = 2),dens.sig),paste(signif(g.assor,digits = 2),assor.sig)),\n                      \"Random network\" = c(paste(\"[\",as.character(signif(as.numeric(random.values.95$mean.degree[1]),digits = 2)),\",\",as.character(signif(as.numeric(random.values.95$mean.degree[2]),digits = 2)),\"]\",sep = \"\"),paste(\"[\",as.character(signif(as.numeric(random.values.95$dim[1]),digits = 2)),\",\",as.character(signif(as.numeric(random.values.95$dim[2]),digits = 2)),\"]\",sep = \"\"),\n                       paste(\"[\",as.character(signif(as.numeric(random.values.95$av.path[1]),digits = 2)),\",\",as.character(signif(as.numeric(random.values.95$av.path[2]),digits = 2)),\"]\",sep = \"\"),\n                       paste(\"[\",as.character(signif(as.numeric(random.values.95$dens[1]),digits = 2)),\",\",as.character(signif(as.numeric(random.values.95$dens[2]),digits = 2)),\"]\",sep = \"\"),\n                       paste(\"[\",as.character(signif(as.numeric(random.values.95$deg.assor[1]),digits = 2)),\",\",as.character(signif(as.numeric(random.values.95$deg.assor[2]),digits = 2)),\"]\",sep = \"\")))\n# Supporting information - Table S3 ---------------------------------------\nprint(\n  xtable(prop.summary.table,caption = \"properties\",label = \"table:basicnetworkprop\",align = \"llcc\",digits = rep(0,4))\n  ,include.rownames = FALSE,caption.placement =\"top\",table.placement = \"H\",floating = TRUE,sanitize.text.function = function(x) {x}, scalebox = 0.7)\n\n\n# Resilience of the experimental network ----------------------------------\n\n# Supporting information - bootstrap---------------\n#The following section provides the code for the bootstrap analysis.\nd.data.nom.type$comb  <- sapply(1:nrow(d.data.nom.type), function(x) paste(d.data.nom.type$ENP[x], d.data.nom.type[x, nom.data.column], sep = \"-\"))\n#Label each DOM-PM as \"new\" or \"old\" based on the definition of diversity:\nd.data.nom.type$label.diversity <- rep(\"old\", nrow(d.data.nom.type))\nfor(i in unique(d.data.nom.type$year)){\n  #this loop assigns the label \"new\" or \"old\" to each DOM-ENP combination,\n  #based on the first definition of diversity\n  #this year combinations:\n  current.comb  <- unique(d.data.nom.type$comb[d.data.nom.type$year == i])\n  n.new.comb <- sum(!current.comb%in%d.data.nom.type$comb[d.data.nom.type$year < i])#the number of unique and new comb added in the current year\n  #now assign the label: \"new\" to n.new.comb and label: \"old\" to the rest of the combination in this year\n  relv.rows  <- which(d.data.nom.type$year == i)#the rows the correspond to experiments that were published in year i\n  #assign \"new\" label to the first n.new.comb rows from relv.rows and all the rest assign the label: \"old\"\n  d.data.nom.type$label.diversity[relv.rows]  <-  c(rep(\"new\", n.new.comb), rep(\"old\", length(relv.rows) - n.new.comb))\n}\n\nR  <- 9999#number of bootstrap samples to generate\nset.seed(1)\npublication.boot  <- boot(d.data.nom.type, bootstrap.publications, R = R, strata = factor(d.data.nom.type$year))\npublication.boot.ci.normal  <- sapply(1:length(publication.boot$t0), #95% confidence interval for the diversity index according to the bootstrap samples\n                               function(x) {boot.ci(boot.out = publication.boot, type = c(\"norm\"), index = x, conf = 0.95)$normal[2:3]})\n\n# Bootstrap analysis - Figure S9 --------------------------------------\n#The following figure depicts the diversity index trend and the 95% bootstrap normal confidence interval.\npdf(\"FigureS9.pdf\")\nplot(publication.boot$t0, ylim = c(0,1), col = \"black\", ylab = expression(\"D\"[comb]), xlab = \"Year\", xaxt = \"n\", bty = \"n\", pch = 8)\naxis(1, at = seq(0, 25, by =5), labels = seq(1990, 2015, by =5))\n#add the 95% confidence interval based on the bootstrap samples:\npublication.boot.ci.normal  <- sapply(1:length(publication.boot$t0), function(x) {boot.ci(boot.out = publication.boot, type = c(\"norm\"), index = x, conf = 0.95)$normal[2:3]})\npolygon(c(rev(1:26), 1:26), c(rev(publication.boot.ci.normal[1, ]), publication.boot.ci.normal[2, ]), col = '#2E9AFE30',ylim = c(0.2,1),border = NA)\nlegend(\"topleft\", legend = c(expression(\"95% CI (normal) D\"[comb])), bty = \"n\",fill = c('#2E9AFE30'),border = NA)\ndev.off()\n\n# The effect of considering only experiments with NOM as their DOM constituent --------\n#The following code compares the empirical network with the subset network comprising of \n#only the experiments that employ humic substances as their DOM constituent.\nis.humic.subs <- sapply(V(g.data.nom.type)$name[V(g.data.nom.type)$type == FALSE], function(x) {\n  found  <- grep(pattern = \"(humic)|(fulvic)|(total DOM)|(humic substance)\",x = x);if(length(found) != 0){return(TRUE)}else{return(FALSE)}})\nhumic.nom.names <- V(g.data.nom.type)$name[V(g.data.nom.type)$type == FALSE][is.humic.subs]\npm.names <- V(g.data.nom.type)$name[V(g.data.nom.type)$type == TRUE]\n#inducing subgraph to obtian only the PM and humic substances DOM nodes:\ng.humic.dom.only <- induced_subgraph(g.data.nom.type,vids = c(pm.names,humic.nom.names))\n#Eliminating the nodes that are not connected to anything:\ng.components  <- clusters(g.humic.dom.only)\nsingeltons <- which(g.components$csize == 1)#what components are comprised of singeltons only?\nhumic.dom.exp.nodes <- names(g.components$membership)[!g.components$membership%in%singeltons]#which pm is are not member of these singletons components? I don't take only the lcc because there can be disconnected nodes that still have DOM of humic substance type and I would like to include these components as well in the dom humic only network\ng.humic.dom.only <- induced_subgraph(g.humic.dom.only,vids = humic.dom.exp.nodes)\nV(g.humic.dom.only)$degree.lables.code <- label.node.degree(g.humic.dom.only)#label only the 5 PM with the highest degree and the 5 DOM with the highest degree\n\n#comparison to the original network:\n#the differences between the general network and the humic only experiments network:\nnetwroks.compare  <- data.frame(\"all DOM\" = c(as.character(signif(vcount(g.data.nom.type), digits = 3)), as.character(signif(sum(V(g.data.nom.type)$type), digits = 3)),\n                                              as.character(signif(sum(V(g.data.nom.type)$type == FALSE), digits = 3)),\n                                              as.character(signif(ecount(g.data.nom.type), digits = 3)),\n                                              as.character(signif(sum(E(g.data.nom.type)$weight), digits = 3)),\n                                              as.character(signif(assortativity_degree(g.data.nom.type), digits = 3)),\n                                              as.character(signif(ecount(g.data.nom.type)\n                                                                  /(sum(V(g.data.nom.type)$type)*sum(V(g.data.nom.type)$type == FALSE)), digits = 3)),\n                                              as.character(signif(ecount(g.data.nom.type)/sum(E(g.data.nom.type)$weight), digits = 3))),\n                                \"humic DOM only\" = c(as.character(signif(vcount(g.humic.dom.only), digits = 3)),as.character(signif(sum(V(g.humic.dom.only)$type), digits = 3)),\n                                                     as.character(signif(sum(V(g.humic.dom.only)$type == FALSE), digits = 3)),\n                                                     as.character(signif(ecount(g.humic.dom.only), digits = 3)),\n                                                     as.character(signif(sum(E(g.humic.dom.only)$weight), digits = 3)),\n                                                     as.character(signif(assortativity_degree(g.humic.dom.only), digits = 3)),\n                                                     as.character(signif(ecount(g.humic.dom.only)\n                                                                         /(sum(V(g.humic.dom.only)$type)*sum(V(g.humic.dom.only)$type == FALSE)), digits = 3)),\n                                                     as.character(signif(ecount(g.humic.dom.only)/sum(E(g.humic.dom.only)$weight), digits = 3))))\nrow.names(netwroks.compare) <- c(\"number of nodes\", \"number of PM nodes\", \"number of DOM nodes\", \"number of combinations\", \"number of experiments\",\n                                 \"degree assortativity\", \"density\", \"combinations diversity\")\n# NOM only - Figure S10 --------------------------------------\n\npar(xpd = NA)\nm  <- rbind(c(0.0, 0.45, 0.1, 0.9),#empirical network\n            c(0.55, 1, 0.1, 0.9))#subset network\npdf(\"FigureS10.pdf\")\nsplit.screen(m)\nscreen(1)\npar(mar = rep(0, 4))\nplot(g.data.nom.type, vertex.frame.color = V(g.data.nom.type)$frame.color, vertex.size = log(degree(g.data.nom.type))+4, vertex.shape = V(g.data.nom.type)$shape,\n     vertex.color = V(g.data.nom.type)$color, vertex.label = V(g.data.nom.type)$degree.lables.code, vertex.label.cex = 1, \n     vertex.label.color = \"black\", edge.width = E(g.data.nom.type)$width/4, main=\"\", edge.curved = 0.1)\nlegend(-1.1, 1.5 , pch = c(21, 22), col = c(\"dodgerblue4\", \"grey\"), pt.bg = c(\"light blue\", \"lightsalmon\"), text.col = c(\"dodgerblue4\", \"black\"),\n       legend = c(\"PM\",\"DOM\"), bty = \"n\", pt.cex = 2, cex = 0.7, y.intersp = 1.5)\n#legend for the PM\nlegend(\"bottomleft\", pch = V(g.data.nom.type)$degree.lables.code[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == TRUE],\n       legend = V(g.data.nom.type)$name[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == TRUE], col = \"black\", cex = 0.7,\n       y.intersp = 1, bty = \"n\")\n#legend for the DOM\nlegend(\"bottomright\", pch = V(g.data.nom.type)$degree.lables.code[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == FALSE],\n       legend = V(g.data.nom.type)$name[V(g.data.nom.type)$degree.lables.code != \"\" & V(g.data.nom.type)$type == FALSE], col = \"black\", cex = 0.7,\n       y.intersp = 1, bty = \"n\")\nscreen(2)\npar(mar = rep(0, 4))\nplot(g.humic.dom.only, vertex.frame.color = V(g.humic.dom.only)$frame.color, vertex.size = log(degree(g.humic.dom.only))+4, vertex.shape = V(g.humic.dom.only)$shape,\n     vertex.color = V(g.humic.dom.only)$color, vertex.label = V(g.humic.dom.only)$degree.lables.code, vertex.label.cex = 1, \n     vertex.label.color = \"black\", edge.width = E(g.humic.dom.only)$width/4, main=\"\", edge.curved = 0.1)\n#legend for the PM\nlegend(\"bottomleft\", pch = V(g.humic.dom.only)$degree.lables.code[V(g.humic.dom.only)$degree.lables.code != \"\" & V(g.humic.dom.only)$type == TRUE],\n       legend = V(g.humic.dom.only)$name[V(g.humic.dom.only)$degree.lables.code != \"\" & V(g.humic.dom.only)$type == TRUE], col = \"black\", cex = 0.7,\n       y.intersp = 1, bty = \"n\")\n#legend for the DOM\nlegend(\"bottomright\", pch = V(g.humic.dom.only)$degree.lables.code[V(g.humic.dom.only)$degree.lables.code != \"\" & V(g.humic.dom.only)$type == FALSE],\n       legend = V(g.humic.dom.only)$name[V(g.humic.dom.only)$degree.lables.code != \"\" & V(g.humic.dom.only)$type == FALSE], col = \"black\", cex = 0.7,\n       y.intersp = 1, bty = \"n\")\nclose.screen(all.screens = TRUE)\ndev.off()\n\n# Supporting infromation - Table S4 ---------------------------------------\nprint(\n  xtable(netwroks.compare ,caption = \"comparison\",label = \"table:comp\",align = \"llc\",digits = rep(0,3))\n  ,include.rownames = TRUE,caption.placement =\"top\",table.placement = \"H\",floating = TRUE,sanitize.text.function = function(x) {x}, scalebox = 0.7)\n\n# Supporting information - Temporal dimension of the network's structure --------\n\n#There is no code used besides the one for Figure S5 (see next section)\n\n# Supporting information - Figure S11 --------------------------------------\n#color the edges based on year the last experiments employing the two connected materials was performed:\n#first convert all lines on the database that they will look like the edge notation in the g.data.nom.type network.\ndatabase.edges  <- sapply(1:nrow(d.data.nom.type), function(x) paste(d.data.nom.type$ENP[x], d.data.nom.type$NOM.type.detailed[x], sep = \"-\"))\nnetwork.edges  <- sapply(1:nrow(edge.list), function(x) paste(edge.list[x,1], edge.list[x,2], sep = \"-\"))\n#now match the link to the line\nfor(i in 1:length(network.edges)){\n  rows  <- which(database.edges == network.edges[i])#returns the rows in the database that corresponds to the edge comprising the DOM and PM combination\n  #print(max(d.data.nom.type$year[rows]))\n  E(g.data.nom.type)$year.latest[i] <- max(d.data.nom.type$year[rows])#the latest year the given combination was studied\n}\n#now convert these to colors\ncolor.list.year <- colorRampPalette(c(\"blue\", \"skyblue\", \"green\", \"orange\", \"yellow\"))(length(unique(E(g.data.nom.type)$year.latest)))#create color map to the year published\nnames(color.list.year) <- sort(unique(E(g.data.nom.type)$year.latest), decreasing = TRUE)#sort the colors\nfor(i in 1:ecount(g.data.nom.type)){\n  #go over the link and assign to them the color for that latest year of publications\n  E(g.data.nom.type)$year.color[i]  <- color.list.year[names(color.list.year) == E(g.data.nom.type)$year.latest[i]]\n}\npdf(\"FigureS11.pdf\")\nplot(g.data.nom.type, vertex.frame.color = \"grey\", vertex.size = sqrt(degree(g.data.nom.type))+2, vertex.shape = V(g.data.nom.type)$shape,\n     edge.width = E(g.data.nom.type)$width/4,main=\"\", vertex.color = ifelse(V(g.data.nom.type)$type == TRUE, \"light blue\",\"lightsalmon\"), \n     vertex.label = \"\", edge.color = E(g.data.nom.type)$year.color)\npnts <- cbind(x =c(-0.9, -1., -1, -0.9), y =c(1.0, 1.0, 0.5, 0.5))#points to poisition the legend on the plot\nlegend.gradient(pnts,rev(color.list.year), limits = range(E(g.data.nom.type)$year.latest), title = \"\")\nlegend(-1.1,1.2, pch = c(21,22), col = \"grey\", pt.bg = c(\"light blue\", \"lightsalmon\"), text.col = c(\"blue\", \"black\"), legend = c(\"PM\", \"DOM\"), bty = \"n\",\n       pt.cex = 2, horiz = TRUE)\ndev.off()\n\n\n\n",
    "created" : 1471977628975.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "504|46|587|9|\n1163|145|1164|51|\n1479|73|1481|71|\n",
    "hash" : "2988884279",
    "id" : "B20715E0",
    "lastKnownWriteTime" : 1485285455,
    "last_content_update" : 1485285455219,
    "path" : "~/Documents/Projects/version_control/DOM-PM-network/RCODE/mainProjectCode.R",
    "project_path" : "mainProjectCode.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}