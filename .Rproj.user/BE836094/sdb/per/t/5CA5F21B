{
    "collab_server" : "",
    "contents" : "\n# Install required packages -----------------------------------------------\nload.required.packages <- function(){\n  inst.pack <- installed.packages()[ ,1]#installed packages\n  required.packages <- c(\"igraph\", \"ggplot2\", \"ggrepel\", \"reshape2\",\n                         \"bio3d\", \"MASS\", \"SDMTools\", \"TeachingDemos\",\n                         \"xtable\", \"boot\", \"gplots\", \"nlme\", \"forecast\")\n  for(i in required.packages){\n    if(!is.element(i, inst.pack)){\n    install.packages(i)#if not installed then install the package\n    }\n    library(i,character.only = TRUE)#load the package\n  }\n}\n#load.required.packages()\n\n# Read in the dataframe and convert the data into a graph object ----------\nadj.to.graph <- function(d.data,names){\n  #this function converts an adjacency matrix to a graph with weights attributes\n  #it takes it takes as an argument an adjacency list (data frame) and a names list to seperte between the types of nodes -> to create a bipartite network\n  g.data <- graph.adjacency(get.adjacency(graph.data.frame(d.data,directed =FALSE), sparse=FALSE), mode =\"undirected\", weighted = TRUE)\n  #Basic vertex properties\n  V(g.data)$type <- V(g.data)$name %in% names #convert to a bipartite network by checking of the value is in the ENP (true) or nom column (false)\n  V(g.data)$color  <- ifelse(V(g.data)$type == TRUE, \"light blue\", \"lightsalmon\")#color by the node type, PM blue and DOM red\n  V(g.data)$label.color[V(g.data)$type]  <- \"darkslateblue\"#for PM node type\n  V(g.data)$frame.color[V(g.data)$type]  <- \"dodgerblue4\"\n  V(g.data)$label.color[!V(g.data)$type]  <- \"black\"#for DOM type\n  V(g.data)$frame.color[!V(g.data)$type]  <- \"grey\"\n  V(g.data)$shape  <- ifelse(V(g.data)$type == TRUE, \"circle\",\"square\")\n  V(g.data)$label.cex = 0.7  \n  E(g.data)$width <- E(g.data)$weight\n  return(g.data)\n}\n\ngraph.prop <- function(g.graph){\n  #this function takes a graph and extract the basic information\n  data.frame(n.nodes = vcount(g.graph),n.links = ecount(g.graph),\n  mean.degree = 2*ecount(g.graph)/vcount(g.graph), shortest.path = average.path.length(g.graph), \n  assort = assortativity.degree(g.graph), diameter = diameter(g.graph),density = ecount(g.graph)/(sum(V(g.graph)$type) * sum(V(g.graph)$type == FALSE)))\n}\n\n# Add attributes to a graph's vertices ------------------------------------\nlabel.node.degree <- function(g, top = 5){\n  #this function calcualtes the top 5 nodes with the highest degree (of each node type -> assuming bipatite network) and returns a the graph instance with the corresponding vertices attributes such as label and label color and frame\n  #for this nodes and \"\" label for all other nodes\n  #sort the degree of each node type\n  label.by.degree <- rep(\"\", vcount(g))\n  #for PM nodes:\n  pm.degree <- sort(degree(g)[V(g)$type], decreasing = T)\n  pm.degree.top <- names(pm.degree[1:top])#pm nodes with the highest degree\n  label.by.degree[V(g)$name %in% pm.degree.top]  <- 1:top#assign numbers as lables to the PM nodes with the highest degree\n  #for DOM nodes:\n  dom.degree <- sort(degree(g)[V(g)$type == FALSE], decreasing = T)\n  dom.degree.top <- names(dom.degree[1:top])#pm nodes with the highest degree\n  label.by.degree[V(g)$name %in% dom.degree.top]  <- letters[1:top]#assign numbers as lables to the PM nodes with the highest degree\n  return(label.by.degree)\n}\n\n# Analysis of diversity trend ---------------------------------------------\nmodify.subst <- function(doi,g.cit.only.copy,tendency,all.comb,material.in.network){\n  #the doi is the currently analyzed node, tendency is the fraction to be imitated from the cited referecnes and all.comb are all the possible combinations avaailable in the\\\n  #original dataset\n  #the number of combinations required by the analyzed node:\n  n.exper <- nrow(V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == doi][[1]])\n  #print(doi)\n  #print(n.exper)\n  #the nodes that the given node cites:\n  out.neig <- unlist(neighborhood(graph = g.cit.only.copy,order = 1,nodes = doi,mode = \"out\"))#the first node is always the one that is being analyzed\n  #the combinations of materials these nodes employ\n  if(length(out.neig) == 1){#if it cites no other references it just returns the smae materials used in the analyzed node without modifications\n    #print(\"hi\")\n    return(V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == doi])\n  }else{out.neig <- out.neig[-1]}\n  neig.comb <- data.frame()\n  for(neig in names(out.neig)){\n    this.neig.comb <- unique(V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == neig][[1]])\n    this.neig.comb$comb <- paste(this.neig.comb[[1]],this.neig.comb[[2]],sep = \"-\")\n    #accumulate all the combinations employed by the neighbours in a list (after converting each combination to a string where ENP and NOM are seperated by \"-\")\n    neig.comb <- rbind(neig.comb,this.neig.comb)\n    #print(this.neig.comb)\n  }\n  #modify the substances they employ according to repetition/innovation from their original neighbours int he original graph\n  neig.comb.freq <- sort(table(neig.comb$comb),decreasing = TRUE)\n  take.from.cited <- round(tendency*n.exper)#the number of combinations to take from the cited references\n  take.from.all.comb <- n.exper - take.from.cited#the number of combinations to take from all other combinations that are not in the cited references\n  com.not.neig <- all.comb$comb[!all.comb$comb %in% neig.comb$comb]#all the combinations that are not in the neighbouring cited referecnes\n  if(take.from.cited == 0){\n    #if no combination should be taken from the cited references:\n    repeat.comb <- \"\"\n  }else{\n    if(length(unique(neig.comb.freq)) == 1){#if all combinations are unique and not repeated in the cited references,sample randomly, so there won't be bias to some letter\n      if(length(neig.comb.freq) < take.from.cited){#if there are more comb required than available, sample randomly from the material that was already tested in the network\n        repeat.comb <- c(names(neig.comb.freq),sample(material.in.network,take.from.cited-length(neig.comb.freq),replace=TRUE))\n      }else{\n        repeat.comb <- names(neig.comb.freq[sample(1:nrow(neig.comb),take.from.cited,replace =TRUE)])\n      }\n    }else{\n      #if the cited combinations have unique frequencies\n      if(length(neig.comb.freq) < take.from.cited){#if the length of the required combinations is less than the one available from its neighbours add more randomly combinations but ones that were already tested in the network\n        repeat.comb <- c(names(neig.comb.freq)[1:take.from.cited],sample(material.in.network,take.from.cited-length(neig.comb.freq),replace=TRUE))\n      }else{\n        repeat.comb <- names(neig.comb.freq)[1:take.from.cited]\n      }\n    }}\n  #replace to this combination in the currently analyzed node:\n  #print(rbind(unique(neig.comb[neig.comb$comb %in% repeat.comb,1:2]),unique(all.comb[all.comb$comb %in% sample(com.not.neig,take.from.all.comb,replace =FALSE),1:2])))\n  #return(list(rbind(unique(neig.comb[neig.comb$comb %in% repeat.comb,1:2]),unique(all.comb[all.comb$comb %in% sample(com.not.neig,take.from.all.comb,replace =FALSE),1:2]))))\n  return(list(rbind(unique(all.comb[all.comb$comb %in% repeat.comb,1:2]),unique(all.comb[all.comb$comb %in% sample(com.not.neig,take.from.all.comb,replace =TRUE),1:2]))))\n}\n\nchange.graph.trend <- function(g.graph,year.threshold,d.data,tendency,seed){\n  #takes as arguments the original citation graph (that has the materials tested attributes), the year threshold from which it starts to modify researchers behaviour and d.data frame that contains all the relevant data regarding DOI, material used etc... tendency is the balance between innovation and repetition required:\n  #first create a copy of the graph\n  seed <- 1000*seed#set seed for reproducibilty, is multiplied by 1000 so the next call for the function will get different seed\n  g.cit.only.copy <- g.graph\n  #define a threshold of a year from which the modification will start to take place\n  dois.threshold <- tolower(d.data$DOI[d.data$year >= year.threshold])\n  dois.threshold <- dois.threshold[dois.threshold != \"\"]\n  dois.threshold <- as.character(dois.threshold[dois.threshold %in% V(g.cit.only.copy)$name])\n  #subset the graph to include only DOI with publication year above thereshold\n  sub.g.cit.only <- induced_subgraph(g.cit.only.copy,as.character(dois.threshold))\n  material.in.network <- c()# a growing list of the material that were already employed in the network at agiven stage\n  while(vcount(sub.g.cit.only) > 1){\n    #find among those verteces with outdegree == 0\n    old.nodes <- names(which(degree(sub.g.cit.only,mode = \"out\") == 0))\n    for(old in old.nodes){#accumulate all the combinations of materials that were alreay tested in the network\n      material <- unique(V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == old][[1]])\n      material.in.network <- c(material.in.network,paste(material[[1]],material[[2]],sep = \"-\"))\n    }\n    for(old in old.nodes){\n      set.seed(seed)\n      #iterate over all nodes in the old nodes and modify their employed content accroding to the repetition/innovation rule \n      V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == old] <- modify.subst(old,g.cit.only.copy,tendency,all.comb,material.in.network)\n      #print(V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == old])\n      seed <- seed + 1\n    }\n    #delete those vertexes from the subgraph/subset again and find again the ones with 0 outdegree\n    sub.g.cit.only <- delete_vertices(sub.g.cit.only,old.nodes) \n    #continue untill all verteces were modified\n  }\n  #use the modified attrbutes in the g.cit.only.copy as a basis to create new experimental dataframe:\n  #materials <- data.frame(ENP=c(),DOM = c(),year = c(),check.rows = FALSE)\n  materials <- data.frame()\n  for(doi in V(g.cit.only.copy)$name){\n    mat.list <- V(g.cit.only.copy)$material.employ[V(g.cit.only.copy)$name == doi][[1]]\n    #row.names(mat.list) <- NA\n    #year.expr <- rep(unique(d.data.nom.type$year[d.data.nom.type$DOI == doi]),n = nrow(mat.list))\n    if(nrow(mat.list) > 0){\n      year.expr <- rep(unique(d.data.nom.type$year[d.data.nom.type$DOI == doi]), n = nrow(mat.list))\n      mat.list$year <- year.expr\n      #materials <- rbind(materials,cbind(mat.list,year.expr))\n      materials <- rbind(materials, mat.list)\n  }}\n  colnames(materials) <- c(\"ENP\",\"DOM\",\"year\")\n  #return(list(convert.attrib.to.graph(g.cit.only.copy,d.data),g.cit.only.copy))\n  return(materials)\n}\n\ndiversity.over.time <- function(d.data,start.year){\n  #given a dataframe of three columns: PM, DOM and year, this function returns the array of diversity values from the year given by star.year argument (it\n  #also considers the experiments prior this year of course)\n  diversity.array <- c()\n  d.data$comb <- sapply(1:nrow(d.data), function(x) paste(d.data[x,1],d.data[x,2],sep = \"-\"))#create a forth column with the combination of DOM-PM as single strings\n  for(i in start.year:max(d.data$year)){\n    d.sliced <- d.data$comb[d.data$year <= i]\n    diversity.val <- length(unique(d.sliced))/length(d.sliced)\n    diversity.array <- c(diversity.array,diversity.val)\n  }\n  return(diversity.array)\n}\n\n\n# Analysis of DOM source and chemical composition -------------------------\n\nanalysis.DOM.source  <- function(d.data, all.substances){\n  #This function performs pca on the d.data, assuming the first column is the identifier of the materials. \n  #all.substances that specifies for each DOM materail its source. The function returns a dataframe comprising of the first two pc scores and the type and identifier of each material\n  #now eliminate the columns that have only missing values:\n  na.whole.col  <- sapply(1:ncol(d.data), function(x) {sum(is.na(d.data[,x]))==nrow(d.data)})\n  #eliminate the rows that have only missing values:\n  na.whole.row <- sapply(1:nrow(d.data), function(x) {sum(is.na(d.data[x,])) == (ncol(d.data)-1)})#ncol()-1 since the first column is the identifier and it always has\n  #a value\n  d.data <- d.data[ ,!na.whole.col]\n  d.data <- d.data[!na.whole.row, ]\n  #if any value has the sign \"<\" for example, we have that \"<0.05\" is represented as \"&lt;0.05\" therefore there is a need to \n  #before further analysis, convert all columns to characters: because if they are factors, regex subst. won't work\n  for(i in 1:ncol(d.data)){d.data[ ,i]  <- as.character(d.data[ ,i])}\n  for(row in 1:nrow(d.data)){\n    for(col in 3:length(d.data[row, ])){#skip the first three columns that are the col\n      x  <- as.character(d.data[row, col])\n      if(length(grep(x = x, pattern = \"^&lt\"))){\n        d.data[row,col]  <- gsub(x = as.character(d.data[row, col]), pattern = \"&lt\\\\;\", replacement = \"\")\n      }}}\n  for(i in 2:ncol(d.data)){d.data[ ,i]  <- as.numeric(d.data[ ,i])}#convert back to numeric type\n  \n  #ommiting highly correlated variables (one of a pair)\n  rownames(d.data) <- d.data[ ,1]\n  d.data <- d.data[-1]\n  cor.data <- cor(d.data[-1],use = \"complete.obs\")\n  cor.data[upper.tri(cor.data)] <- 0#converting all the upper triangular valeus to zero\n  diag(cor.data) <- 0#comverting the diagonal to zer, in order not to consider cor between a variable and itself\n  data.new <- d.data[,!apply(cor.data, 2, function(x) any(x > 0.99))]\n  \n  #now take only complete cases: only now remove the missing values, because some column might be deleted due to high correlation and therefore existance\n  #of missing values there should not affect the extraction of missing values\n  data.new <- data.new[complete.cases(data.new), ]\n  pca.data  <- princomp(data.new,cor = T)\n  print(summary(pca.data,loadings = T))\n  #print(pca.data$scores[,1])\n  xlim  <- range(c(pca.data$scores[ ,1]))*1.5\n  ylim  <- range(c(pca.data$scores[ ,2]))*1.5\n  d.pca <- data.frame(pca1 = pca.data$scores[ ,1], pca2 = pca.data$scores[ ,2])\n  rownames(d.pca) <- sapply(rownames(data.new), function(x) as.character(all.substances[which(all.substances[2] == x), 1]))\n  d.pca$type  <- sapply(rownames(data.new), function(x) as.character(unlist(all.substances[which(all.substances[2] == x), 3])[1]))\n  d.pca$type  <- factor(d.pca$type)\n  #rownames(data.new) <- rownames(d.pca)\n  return(d.pca)\n}\n\npercentage.in.quadrant <- function(data, rows){\n  #this function calculates the percentage of materials environmental source in a given quadrant and returns the one that is most prevelant\n  #along with its percentage of occurance\n  perc.occur <- sort(table(data$type[rows])/sum(table(data$type[rows])), decreasing = T)#the percentage of occurance of each type\n  fresh.water <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                              function(x) {if(grepl(x, pattern = \"(lake)|(river)|(groundwater)|(wetland)\") \n                                                              & !grepl(x, pattern = \"(sediment)\")){return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  soil <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                       function(x) {if(grepl(x, pattern = \"(soil)|(podzol)\") \n                                                       & !grepl(x, pattern = \"(sediment)\")){return(TRUE)}else{return(FALSE)}})]),digits = 2)\n  peat <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                       function(x) {if(grepl(x, pattern = \"(peat)\") \n                                                       & !grepl(x, pattern = \"(sediment)\")){return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  sediment <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                           function(x) {if(grepl(x, pattern = \"(sediment)\")) {return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  marine <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                         function(x) {if(grepl(x, pattern = \"(ocean)\") \n                                                         & !grepl(x, pattern = \"(sediment)\")){return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  coal <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                       function(x) {if(grepl(x, pattern = \"(coal)\")){return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  aldrich <- signif(sum(perc.occur[sapply(names(perc.occur), \n                                          function(x) {if(grepl(x, pattern = \"(aldrich)\")){return(TRUE)}else{return(FALSE)}})]), digits = 2)\n  sum.list <- c(fresh.water, soil, peat, sediment, marine, coal, aldrich)\n  names(sum.list) <- c(\"fresh water\", \"soil\", \"peat\", \"sediment\", \"marine\", \"coal\", \"aldrich\")\n  #max.sum.list <- sum.list[sum.list == max(sum.list)]\n  sum.list <- sum.list*100#convert to percentages\n  max.sum.list <- sum.list[sum.list > 20]\n  #concatenate all into a string\n  answer <- \"\"\n  for(i in 1:length(max.sum.list)){answer <- paste(paste(answer, names(max.sum.list[i]), sep = \"\"), paste(max.sum.list[i], \"%\\n \", sep = \"\"), sep = \" \")}\n  return(answer)\n}\n\n\n# Check contingency table -------------------------------------------------\ntable.check <- function(table, cols){\n  #this function checks that a given contingency table (i.e. 'table') contains all the columns listed in 'col'\n  #if it doesn't it adds this column in the right position. It assums that the variable 'col' is a numeric list\n  if(length(colnames(table)) == length(cols)){return(table)}\n  #else add the required columns\n  n <- nrow(table)\n  for(i in cols[!cols%in%colnames(table)]){#go over all the instances that are not in the table\n    table <- cbind(table, rep(0, n))#append the last column to to account for the missing column\n    #rename the column\n    colnames(table)[ncol(table)] <- i\n    #print(i)\n  }\n  #reorder to columns in an increasing way\n  table <- table[ , order(colnames(table))]\n  return(table)\n}\n\nendofline.remover <- function(x){\n  #removes end of line and trailing and leading spaces\n  x <- sapply(x, function(y) tolower(gsub(x = gsub(pattern = \"^\\n|\\n$\", x = y, replacement = \"\"), pattern = \"^\\\\s|\\\\s$\",replacement = \"\")))\n}\n\nna.zero <- function (x) {\n  #this function replaces NA with 0 in a given array\n  x[is.na(x)] <- 0\n  return(x)\n}\n\n# Bootstrap analysis ------------------------------------------------------\ndiversity.func.boot <- function(d.data, year.start){\n  #This function calculates the diversity of a given experimental dataset. It takes as arguments the dataset (assuming it contains the column: \"label.diversity,\n  # which contains the labels: \"new\" or \"old\" for the DOM-PM combinations, where new/old is given by the defintion of diversity). Year.start is the year from which to\n  #start the calculations of diversity and the year from which to start the calculations\n  diversity.trend <- c() # place holder for the trend values to be computed below\n  for(year in year.start:max(d.data$year)){\n    d.data.slice  <- d.data[d.data$year <= year, \"label.diversity\"]\n    n.experiments  <- length(d.data.slice)#the number of experiments done up to the given year\n    n.com <- sum(d.data.slice == \"new\")#the number of unique combinations studied up to the given year\n    diversity.trend  <- c(diversity.trend, n.com/n.experiments)\n  }\n  return(diversity.trend)\n}\nbootstrap.publications <- function(data, i, year = 1990){\n  #This function takes the data set of all DOIs and the index of the lines that are being resampled, where resampling is stratefied by years (so resampling is done from each year \n  #and not indiscriminately from the whole dataset) and calculates the diversity index over the years. Arguments: data = dataset, i = resampled rows, year = the year from which diversity should be calculated, by default is set to 1990\n  data  <- data[i,]\n  diversity.trend  <- diversity.func.boot(d.data = data, year.start = year)\n}\n",
    "created" : 1481635793289.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1160753512",
    "id" : "5CA5F21B",
    "lastKnownWriteTime" : 1481924987,
    "last_content_update" : 1481924987458,
    "path" : "~/Documents/Projects/version_control/DOM-PM-network/RCODE/networkAnalysisFunctions.R",
    "project_path" : "networkAnalysisFunctions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}